import logging
from datetime import datetime
from telebot import types

from database.contest import ContestManager
from handlers.envParams import admin_ids
from bot_instance import bot
from menu.constants import ButtonCallback
from menu.menu import Menu

logging.basicConfig(level=logging.DEBUG)

# storage.py
from threading import Lock

class TempStorage:
    def __init__(self):
        self.data = {}
        self.lock = Lock()

    def get_user_step(self, user_id):
        with self.lock:
            return self.data.get(user_id, {}).get('step')

    def set_user_step(self, user_id, step):
        with self.lock:
            if user_id not in self.data:
                self.data[user_id] = {}
            self.data[user_id]['step'] = step

    def update_data(self, user_id, **kwargs):
        with self.lock:
            if user_id not in self.data:
                self.data[user_id] = {}
            self.data[user_id].update(kwargs)

    def clear(self, user_id):
        with self.lock:
            if user_id in self.data:
                del self.data[user_id]

storage = TempStorage()

ADMIN_STEPS = {
    'theme': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω–∫—É—Ä—Å–∞:',
    'description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:',
    'contest_date': '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):',
    'end_date_of_admission': '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏—ë–º–∞ —Ä–∞–±–æ—Ç (–î–î.–ú–ú.–ì–ì–ì–ì):'
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.ADM_CONTEST_INFO)
def start_contest_update(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω–∫—É—Ä—Å
        contest = ContestManager.get_current_contest()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        text = "üìã *–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞:*\n\n"
        markup = types.InlineKeyboardMarkup()
        
        if contest:
            theme = contest[1]
            description = contest[2]
            contest_date = contest[3]
            end_date_of_admission = contest[4]
            
            text += (
                f"üè∑ –¢–µ–º–∞: {theme}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üóì –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {contest_date}\n"
                f"‚è≥ –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –¥–æ: {end_date_of_admission}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?"
            )
            
            markup.row(
                types.InlineKeyboardButton("‚úÖ –î–∞, –æ–±–Ω–æ–≤–∏—Ç—å", callback_data="confirm_update"),
                types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_update")
            )
        else:
            text += "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?"
            markup.row(
                types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="confirm_update"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel_update")
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=markup
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "cancel_update")
def handle_cancel_update(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=Menu.back_adm_contest_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "confirm_update")
def start_contest_update(call):
    print(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    if call.message.chat.id not in admin_ids:
        return
    storage.set_user_step(call.from_user.id, 'theme')
    bot.send_message(call.message.chat.id, ADMIN_STEPS['theme'])

@bot.message_handler(func=lambda m: storage.get_user_step(m.from_user.id) in ADMIN_STEPS)
def handle_admin_input(message):
    user_id = message.from_user.id
    current_step = storage.get_user_step(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text.lower() == '/cancel':
        storage.clear(user_id)
        bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if current_step in ['contest_date', 'end_date_of_admission']:
        try:
            datetime.strptime(message.text, "%d.%m.%Y")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    storage.update_data(user_id, **{current_step: message.text})
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    steps = list(ADMIN_STEPS.keys())
    next_step_index = steps.index(current_step) + 1
    
    if next_step_index < len(steps):
        next_step = steps[next_step_index]
        storage.set_user_step(user_id, next_step)
        bot.send_message(message.chat.id, ADMIN_STEPS[next_step])
    else:
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        data = storage.data[user_id]
        ContestManager.update_contest(
            data['theme'],
            data['description'],
            data['contest_date'],
            data['end_date_of_admission']
        )
        storage.clear(user_id)
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=Menu.back_adm_contest_menu())
