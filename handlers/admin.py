import logging
from venv import logger
from datetime import datetime
import traceback
from functools import partial
from telebot import types
from telebot.apihelper import ApiTelegramException

from database.contest import (
    ContestManager,
    SubmissionManager,
    get_submission,
    user_submissions,
)
from handlers.decorator import private_chat_only
from handlers.envParams import admin_ids
from bot_instance import bot
from menu.constants import ButtonCallback, ButtonText
from menu.menu import Menu

logging.basicConfig(
    filename="bot.log",
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG,
)

# storage.py
from threading import Lock


class TempStorage:
    def __init__(self):
        self.data = {}
        self.lock = Lock()

    def get_user_step(self, user_id):
        with self.lock:
            return self.data.get(user_id, {}).get("step")

    def set_user_step(self, user_id, step):
        with self.lock:
            if user_id not in self.data:
                self.data[user_id] = {}
            self.data[user_id]["step"] = step

    def update_data(self, user_id, **kwargs):
        with self.lock:
            if user_id not in self.data:
                self.data[user_id] = {}
            self.data[user_id].update(kwargs)

    def clear(self, user_id):
        with self.lock:
            if user_id in self.data:
                del self.data[user_id]


storage = TempStorage()

ADMIN_STEPS = {
    "theme": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω–∫—É—Ä—Å–∞:",
    "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
    "contest_date": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):",
    "end_date_of_admission": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏—ë–º–∞ —Ä–∞–±–æ—Ç (–î–î.–ú–ú.–ì–ì–ì–ì):",
}


def check_admin(call):
    if call.from_user.id not in admin_ids:
        bot.answer_callback_query(
            call.id,
            "‚ö†Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º! –í—ã –≤–æ–æ–±—â–µ –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏???",
            show_alert=True,
        )
        return False
    return True


# –ú–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.ADM_CONTEST)
@private_chat_only(bot)
def handle_adm_contest(call):
    if not check_admin(call):
        return
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ú–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤ (–∞–¥–º). –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.adm_contests_menu(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.ADM_CONTEST_INFO
)
def start_contest_update(call):
    if not check_admin(call):
        return
    try:
        storage.clear
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω–∫—É—Ä—Å
        contest = ContestManager.get_current_contest()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        text = "üìã *–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞:*\n\n"
        markup = types.InlineKeyboardMarkup()

        if contest:
            theme = contest[1]
            description = contest[2]
            contest_date = contest[3]
            end_date_of_admission = contest[4]

            text += (
                f"üè∑ –¢–µ–º–∞: {theme}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"‚è≥ –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –¥–æ: {end_date_of_admission}\n"
                f"üóì –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {contest_date}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?"
            )

            markup.row(
                types.InlineKeyboardButton(
                    "‚úÖ –î–∞, –æ–±–Ω–æ–≤–∏—Ç—å", callback_data="confirm_update"
                ),
                types.InlineKeyboardButton(
                    "üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="reset_info"
                ),
            )
            markup.row(
                types.InlineKeyboardButton(
                    text=ButtonText.BACK, callback_data=ButtonCallback.ADM_CONTEST
                ),
                types.InlineKeyboardButton(
                    text=ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU
                ),
            )
        else:
            text += "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?"
            markup.row(
                types.InlineKeyboardButton(
                    "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="confirm_update"
                ),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel_update"),
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="MarkdownV2",
            reply_markup=markup,
        )

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "cancel_update")
def handle_cancel_update(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(
        call.message.chat.id,
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=Menu.back_adm_contest_menu(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
@bot.callback_query_handler(func=lambda call: call.data == "reset_info")
def handle_reset_info(call):
    markup = types.InlineKeyboardMarkup()
    text = "–¢–æ—á–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ?"
    markup.row(
        types.InlineKeyboardButton(
            "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_reset_info"
        ),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_update"),
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        parse_mode="MarkdownV2",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "confirm_reset_info")
def handle_reset_info(call):
    storage.clear
    bot.edit_message_text(
        "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=Menu.back_adm_contest_menu(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "confirm_update")
def start_contest_update(call):
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    storage.set_user_step(call.from_user.id, "theme")
    bot.send_message(call.message.chat.id, ADMIN_STEPS["theme"])


@bot.message_handler(
    func=lambda m: storage.get_user_step(m.from_user.id) in ADMIN_STEPS
)
def handle_admin_input(message):
    user_id = message.from_user.id
    current_step = storage.get_user_step(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text.lower() == "/cancel":
        storage.clear(user_id)
        bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if current_step in ["contest_date", "end_date_of_admission"]:
        try:
            datetime.strptime(message.text, "%d.%m.%Y")
        except ValueError:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024)",
            )
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    storage.update_data(user_id, **{current_step: message.text})

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    steps = list(ADMIN_STEPS.keys())
    next_step_index = steps.index(current_step) + 1

    if next_step_index < len(steps):
        next_step = steps[next_step_index]
        storage.set_user_step(user_id, next_step)
        bot.send_message(message.chat.id, ADMIN_STEPS[next_step])
    else:
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        data = storage.data[user_id]
        ContestManager.update_contest(
            data["theme"],
            data["description"],
            data["contest_date"],
            data["end_date_of_admission"],
        )
        storage.clear(user_id)
        bot.send_message(
            message.chat.id,
            "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=Menu.back_adm_contest_menu(),
        )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.ADM_CONTEST_STATS
)
def show_stats(call):
    if not check_admin(call):
        return
    try:
        pending = SubmissionManager.get_pending_count()
        approved = SubmissionManager.get_approved_count()
        rejected = SubmissionManager.get_rejected_count()
        judges = SubmissionManager.get_judges_count()

        bot.edit_message_text(
            text=(
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:*\n\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: `{pending}`\n"
                f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ —Ä–∞–±–æ—Ç: `{approved}`\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç: `{rejected}`\n"
                f"‚öñÔ∏è –ü–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ: `{judges}`"
            ),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="MarkdownV2",
            reply_markup=Menu.adm_stat_menu(),
        )

    except Exception as e:
        handle_admin_error(call.message.chat.id, e)


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.ADM_SHOW_PARTICIPANTS
)
def handle_show_participants(call):
    participants = SubmissionManager.get_all_submissions_with_info()
    if not participants:
        bot.edit_message_text(
            text=("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö"),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="MarkdownV2V2",
            reply_markup=Menu.adm_stat_menu(),
        )
        return

    text = "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for p in participants:
        text += (
            f"üë§ {p[0]}\n"
            f"üó®Ô∏è @{p[1]}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {p[2]}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {p[3] or '–Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω'}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    bot.edit_message_text(
        text=text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="MarkdownV2V2",
        reply_markup=Menu.adm_stat_menu(),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.ADM_SHOW_JUDGES
)
def handle_show_judges(call):
    judges = SubmissionManager.get_all_judges_with_info()
    if not judges:
        bot.edit_message_text(
            text=("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—É–¥—å—è—Ö"),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="MarkdownV2V2",
            reply_markup=Menu.adm_stat_menu(),
        )
        return

    text = "üìã –°–ø–∏—Å–æ–∫ —Å—É–¥–µ–π:\n\n"
    for j in judges:
        text += f"üë§ {j[0]}\n" f"üó®Ô∏è @{j[1]}\n" f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    bot.edit_message_text(
        text=text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="MarkdownV2V2",
        reply_markup=Menu.adm_stat_menu(),
    )


def process_rejection(message, submission_id):
    try:
        SubmissionManager.update_submission(submission_id, "rejected", message.text)

        submission = get_submission(submission_id)
        user_id = submission["user_id"]
        bot.send_message(
            user_id,
            f"‚ùå –†–∞–±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}",
            reply_markup=Menu.back_user_contest_menu(),
        )

        bot.edit_message_text(
            message.chat.id,
            f"–†–∞–±–æ—Ç–∞ #{submission_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!",
            reply_markup=Menu.adm_menu(),
        )

    except Exception as e:
        handle_admin_error(message.chat.id, e)


def handle_admin_error(chat_id, error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    error_msg = (
        "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
        f"```{str(error)}```\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    )

    try:
        bot.send_message(chat_id, error_msg, parse_mode="MarkdownV2")
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    logger = logging.getLogger(__name__)
    logger.error(f"\n‚ùå ADMIN ERROR [{datetime.now()}]:")
    traceback.print_exc()


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.ADM_CONTEST_RESET
)
def handle_adm_contest_reset(call):
    if not check_admin(call):
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å", callback_data="confirm_reset"
        ),
        types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reset"),
    )

    current_count = SubmissionManager.get_current_number()
    bot.edit_message_text(
        text=(  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            f"‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_count}\n"
            f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞–≤—à–∏—Ö –∑–∞—è–≤–∫—É –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ: {SubmissionManager.get_judges_count()}"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫?"
        ),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "confirm_reset")
def confirm_reset(call):
    if not check_admin(call):
        return
    # –û—á–∏—â–∞–µ–º –ë–î —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
    SubmissionManager.reset_counter()

    logger = logging.getLogger(__name__)
    logger.debug("–û–±–Ω—É–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞")
    logger.debug(
        f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {SubmissionManager.get_pending_count()}/0"
    )
    logger.debug(
        f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç: {SubmissionManager.get_approved_count()}/0"
    )
    logger.debug(
        f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—ã—Ö —Ä–∞–±–æ—Ç: {SubmissionManager.get_rejected_count()}/0"
    )
    logger.debug(
        f"—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Å–µ–≥–æ): {SubmissionManager.get_current_number()}/0"
    )
    logger.debug(
        f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞–≤—à–∏—Ö –∑–∞—è–≤–∫—É –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ: {SubmissionManager.get_judges_count()}/0"
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_submissions.clear()

    logger.debug(
        f"–í—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {len(user_submissions.get_all_users())}/0"
    )

    bot.edit_message_text(
        text="‚úÖ –°—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω!",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=Menu.adm_contests_menu(),
    )


@bot.callback_query_handler(func=lambda call: call.data == "cancel_reset")
def handle_cancel_reset(call):
    if not check_admin(call):
        return
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.edit_message_text(
        text="üö´ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=Menu.back_adm_contest_menu,
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.ADM_REVIEW_WORKS
)
def show_pending_submissions(call):
    if not check_admin(call):
        return
    try:
        submissions = SubmissionManager.get_pending_submissions()

        if not submissions:
            bot.answer_callback_query(call.id, "–ù–µ—Ç —Ä–∞–±–æ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            return

        markup = types.InlineKeyboardMarkup()
        for sub in submissions:
            btn_text = f"–†–∞–±–æ—Ç–∞ #{sub[0]} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sub[1]}"
            markup.add(
                types.InlineKeyboardButton(
                    btn_text, callback_data=f"submission_{sub[0]}"
                )
            )

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
        )

    except Exception as e:
        handle_admin_error(call.message.chat.id, e)


@bot.callback_query_handler(func=lambda call: call.data.startswith("submission_"))
def show_submission_details(call):
    if not check_admin(call):
        return
    try:
        submission_id = int(call.data.split("_")[1])
        submission = get_submission(submission_id)

        media_group = []
        for i, photo in enumerate(submission["photos"]):
            media = types.InputMediaPhoto(
                photo,
                caption=(
                    f"–†–∞–±–æ—Ç–∞ #{submission_id}\n\n{submission['caption']}"
                    if i == 0
                    else ""
                ),
            )
            media_group.append(media)

        bot.send_media_group(call.message.chat.id, media_group)

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                ButtonText.ADM_APPROVE,
                callback_data=f"{ButtonCallback.ADM_APPROVE}{submission_id}",
            ),
            types.InlineKeyboardButton(
                ButtonText.ADM_REJECT,
                callback_data=f"{ButtonCallback.ADM_REJECT}{submission_id}",
            ),
        )

        bot.send_message(
            call.message.chat.id,
            f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã #{submission_id}:",
            reply_markup=markup,
        )

    except Exception as e:
        handle_admin_error(call.message.chat.id, e)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith(ButtonCallback.ADM_APPROVE)
)
def approve_work(call):
    if not check_admin(call):
        return
    try:
        submission_id = int(call.data.replace(ButtonCallback.ADM_APPROVE, ""))
        number = SubmissionManager.approve_submission(submission_id)

        submission = get_submission(submission_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
        user_id = submission["user_id"]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        user_submissions.remove(user_id)

        bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–ù–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã: #{number}",
            reply_markup=Menu.back_user_contest_menu(),
        )

        bot.edit_message_text(
            f"–†–∞–±–æ—Ç–∞ #{submission_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∫–∞–∫ ‚Ññ{number}!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=Menu.adm_menu(),
        )

    except Exception as e:
        handle_admin_error(call.message.chat.id, e)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith(ButtonCallback.ADM_REJECT)
)
def reject_work(call):
    if not check_admin(call):
        return
    try:
        submission_id = int(call.data.replace(ButtonCallback.ADM_REJECT, ""))
        msg = bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
        )
        bot.register_for_reply(msg, lambda m: process_rejection(m, submission_id))

    except Exception as e:
        handle_admin_error(call.message.chat.id, e)


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.ADM_TURNIP)
@private_chat_only(bot)
def handle_adm_turnip(call):
    if not check_admin(call):
        return
    bot.edit_message_text(
        f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ–ø–æ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.adm_menu(),
    )


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.ADM_ADD_GUIDE)
@private_chat_only(bot)
def handle_adm_add_guide(call):
    if not check_admin(call):
        return
    bot.edit_message_text(
        f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞ —Å –≥–∞–π–¥–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.adm_menu(),
    )


# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
admin_replies = {}


@bot.callback_query_handler(func=lambda call: call.data.startswith("reply_to_"))
def handle_reply_button(call):
    if not check_admin(call):
        return
    try:
        user_id = int(call.data.split("_")[-1])
        bot.answer_callback_query(call.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –∞–¥–º–∏–Ω -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å !—Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ chat.id –∞–¥–º–∏–Ω–∞
        admin_replies[call.message.chat.id] = user_id # <-- –ö–ª—é—á–æ–º –≤—ã—Å—Ç—É–ø–∞–µ—Ç chat.id!

        msg = bot.send_message(
            call.message.chat.id,  # –û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
            f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_adm",
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Ç–∞
        bot.register_next_step_handler(
            message=msg,
            callback=partial(process_admin_reply, chat_id=call.message.chat.id)
        )

    except Exception as e:
        logger.error(f"Reply error: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@bot.message_handler(commands=["cancel_adm"])
def cancel_reply(call):
    if call.message.chat.id in admin_replies:
        del admin_replies[call.message.chat.id]
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω")

def process_admin_reply(message, chat_id):  # <-- –î–æ–±–∞–≤–ª—è–µ–º chat_id –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ chat_id
        user_id = admin_replies.get(chat_id)

        if not user_id:
            bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∞")
            return

        bot.send_message(
            user_id,
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}",
            reply_markup=Menu.user_to_admin_or_main_menu(),
        )
        bot.send_message(
            chat_id,
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            reply_markup=Menu.adm_menu(),
        )

        # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if chat_id in admin_replies:
            del admin_replies[chat_id]

    except ApiTelegramException as e:
        logger.error(f"Process reply error: {e}")
        if e.description == "Forbidden: bot was blocked by the user":
            bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        else:
            raise
