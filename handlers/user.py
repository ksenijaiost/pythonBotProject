from datetime import datetime
import logging
import threading
import re
from telebot.apihelper import ApiTelegramException
from venv import logger
from telebot import types
import time
from database.contest import (
    ContestManager,
    SubmissionManager,
    is_user_approved,
    user_submissions,
    user_content_storage,
)
from bot_instance import bot
from handlers.envParams import (
    ADMIN_CHAT_ID,
    NEWSPAPER_CHAT_ID,
    ADMIN_USERNAME,
    CHAT_ID,
    CONTEST_CHAT_ID,
    CHAT_USERNAME,
)
from menu.links import Links
from menu.menu import Menu
from menu.constants import ButtonCallback, ButtonText, ConstantLinks, UserState


from threading import Lock
from weakref import WeakValueDictionary

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.DEBUG
)


def is_user_in_chat(user_id):
    try:
        chat_member = bot.get_chat_member(CHAT_ID, user_id)
        return chat_member.status not in ["left", "kicked"]
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞: {e}")
        return False


# –ì–ê–ô–î–´


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_GUIDES)
def handle_user_guides(call):
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ú–µ–Ω—é –≥–∞–π–¥–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.guides_menu(),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_FIND_GUIDE
)
def handle_user_find_guide(call):
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–∞–π–¥—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.guides_menu(),
    )


# –ö–û–ù–ö–£–†–°–´


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_CONTEST)
def handle_user_guides(call):
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ú–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.contests_menu(),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_CONTEST_INFO
)
def handle_user_contest_info(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ
        contest = ContestManager.get_current_contest()

        if not contest:
            # –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ
            text = (
                "üéâ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            )
            markup = Menu.back_to_main_menu()
        else:
            current_date = datetime.now().date()
            end_date_obj = datetime.strptime(contest[4], "%d.%m.%Y").date()

            if end_date_obj < current_date:
                text += (
                    "\n\n‚ùóÔ∏è *–ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!*"
                )

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            theme = contest[1]
            description = contest[2]
            contest_date = datetime.strptime(contest[3], "%d.%m.%Y").strftime(
                "%d %B %Y"
            )
            end_date_of_admission = datetime.strptime(contest[4], "%d.%m.%Y").strftime(
                "%d %B %Y"
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                f"üèÜ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å!*\n\n"
                f"üìå *–¢–µ–º–∞:* {theme}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                f"üóì *–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:*\n"
                f"‚û°Ô∏è –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: {contest_date}\n"
                f"‚û°Ô∏è –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –¥–æ: {end_date_of_admission}\n\n"
                f"–ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É—á–∞—Å—Ç–∏—è (–∏ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤) –ø–æ —Å—Å—ã–ª–∫–µ:"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton(
                    text="üìú –ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è", url=ConstantLinks.CONTEST_LINK
                )
            )
            markup.row(
                types.InlineKeyboardButton(
                    ButtonText.BACK, callback_data=ButtonCallback.USER_CONTEST
                ),
                types.InlineKeyboardButton(
                    ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU
                ),
            )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=markup,
        )

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—É—Ä—Å–µ: {e}")
        bot.answer_callback_query(
            call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True
        )


SUBMISSION_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


class ContestSubmission:
    def __init__(self):
        self.photos = []  # –°–ø–∏—Å–æ–∫ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        self.caption = ""  # –ü–æ–¥–ø–∏—Å—å –∫ —Ä–∞–±–æ—Ç–µ
        self.media_group_id = None  # ID –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (–¥–ª—è –∞–ª—å–±–æ–º–æ–≤)
        self.submission_time = time.time()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.status = "collecting_photos"  # collecting_photos ‚Üí waiting_text ‚Üí preview
        self.send_by_bot = None  # True/False
        self.last_media_time = time.time()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
        self.group_check_timer = None  # –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã

    def cancel_timer(self):
        if self.group_check_timer:
            self.group_check_timer.cancel()


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_CONTEST_SEND
)
def start_contest_submission(call):
    try:
        user_id = call.from_user.id
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ exists
        if user_submissions.exists(user_id) or is_user_approved(user_id):
            bot.answer_callback_query(
                call.id,
                "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞–±–æ—Ç—É! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∞–º–∏.",
                show_alert=True,
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
        if not is_user_in_chat(call.from_user.id):
            bot.send_message(
                call.message.chat.id,
                "‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ!\n"
                + Links.get_chat_url(),
                reply_markup=Menu.contests_menu(),
            )
            return

        user_id = call.from_user.id
        user_submissions.add(user_id, ContestSubmission())

        bot.send_message(
            call.message.chat.id,
            "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–±–æ—Ç—É (–¥–æ 10 —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –µ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –ø–æ–∑–∂–µ):",
            reply_markup=types.ForceReply(),
        )

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        handle_submission_error(call.from_user.id, e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—Ç
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏—ë–º–∞ —Ñ–æ—Ç–æ
@bot.message_handler(
    content_types=["photo"],
    func=lambda m: user_submissions.exists(m.from_user.id)
    and user_submissions.get(m.from_user.id).status == "collecting_photos",
)
def handle_work_submission(message):
    user_id = message.from_user.id
    submission = user_submissions.get(user_id)

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        if message.media_group_id:
            submission.cancel_timer()

            if submission.media_group_id != message.media_group_id:
                submission.media_group_id = message.media_group_id
                submission.photos = []

            largest_photo = max(message.photo, key=lambda p: p.file_size)
            submission.photos.append(largest_photo.file_id)
            submission.last_media_time = time.time()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
            submission.group_check_timer = threading.Timer(
                1.5, handle_group_completion, args=[user_id]  # 1.5 —Å–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è
            )
            submission.group_check_timer.start()

            return

        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        else:
            largest_photo = max(message.photo, key=lambda p: p.file_size)
            submission.photos.append(largest_photo.file_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if len(submission.photos) > 10:
            bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ!")
            user_submissions.remove(user_id)
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
        submission.status = "waiting_text"
        bot.send_message(
            user_id,
            "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã (–æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç.–¥.):",
            reply_markup=types.ForceReply(),
        )
    except Exception as e:
        handle_submission_error(user_id, e)


def handle_group_completion(user_id):
    submission = user_submissions.get(user_id)
    if not submission or submission.status != "collecting_photos":
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
    if (time.time() - submission.last_media_time) >= 1.5:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ
        if len(submission.photos) == 0:
            bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ!")
            user_submissions.remove(user_id)
            return

        if len(submission.photos) > 10:
            bot.send_message(user_id, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ!")
            user_submissions.remove(user_id)
            return

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞
        submission.status = "waiting_text"
        bot.send_message(
            user_id,
            "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=types.ForceReply(),
        )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: user_submissions.exists(m.from_user.id)
    and user_submissions.get(m.from_user.id).status == "waiting_text",
)
def handle_text(message):
    user_id = message.from_user.id
    submission = user_submissions.get(user_id)

    try:
        submission.caption = message.text
        submission.status = "preview"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        media = [types.InputMediaPhoto(pid) for pid in submission.photos]
        media[0].caption = f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{submission.caption}"
        bot.send_media_group(user_id, media)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞ –º–µ–Ω—è", callback_data="send_by_bot_yes"
            ),
            types.InlineKeyboardButton(
                "–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—é —Å–∞–º(–∞)", callback_data="send_by_bot_no"
            ),
        )
        markup.row(
            types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–±–æ—Ç—ã", callback_data="cancel_submission"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –∑–∞ –í–∞—Å?",
            reply_markup=markup,
        )
    except Exception as e:
        handle_submission_error(user_id, e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_by_bot_"))
def handle_send_method(call):
    user_id = call.from_user.id
    if not user_submissions.exists(user_id):
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–∞")
        return

    try:
        submission = user_submissions.get(user_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—É –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
        submission_id = SubmissionManager.create_submission(
            user_id=user_id, photos=submission.photos, caption=submission.caption
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        SubmissionManager.update_submission(submission_id, status="pending")

        send_by_bot = call.data == "send_by_bot_yes"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è {user_id}: {len(submission.photos)} —Ñ–æ—Ç–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞
        try:
            chat_info = bot.get_chat(CONTEST_CHAT_ID)
        except Exception as e:
            raise Exception(f"–ß–∞—Ç {CONTEST_CHAT_ID} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media = [types.InputMediaPhoto(pid) for pid in submission.photos]
        media[0].caption = (
            f"{submission.caption}\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º: {'‚úÖ –î–∞' if send_by_bot else '‚ùå –ù–µ—Ç'}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫–æ–Ω–∫—É—Ä—Å–∞
        try:
            sent_messages = bot.send_media_group(chat_id=CONTEST_CHAT_ID, media=media)
            logger.info(f"–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {CONTEST_CHAT_ID}: {sent_messages}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç: {str(e)}")
            raise

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            chat_id=user_id,
            text="‚úÖ –†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è –ø—Ä–∏—à–ª—é –Ω–æ–º–µ—Ä!",
            reply_markup=Menu.contests_menu(),
        )

    except Exception as e:
        handle_submission_error(user_id, e)
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞–º!")


@bot.callback_query_handler(func=lambda call: call.data == "cancel_submission")
def handle_cancel_submission(call):
    user_id = call.from_user.id
    try:
        if user_submissions.exists(user_id):
            user_submissions.remove(user_id)
            bot.answer_callback_query(call.id, "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
            for _ in range(2):  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∫–Ω–æ–ø–∫–∏
                try:
                    bot.delete_message(
                        call.message.chat.id, call.message.message_id - _
                    )
                except:
                    pass

    except Exception as e:
        handle_submission_error(user_id, e)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_submission_error(user_id, error):
    logger.error(f"[User {user_id}] –û—à–∏–±–∫–∞: {str(error)}", exc_info=True)
    bot.send_message(
        user_id,
        f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @{ADMIN_USERNAME}",
        reply_markup=Menu.contests_menu(),
    )


# –¢–∞–π–º–∞—É—Ç
def check_timeout():
    while True:
        try:
            current_time = time.time()
            for user_id in user_submissions.get_all_users():
                submission = user_submissions.get(user_id)
                if current_time - submission.submission_time > 600:
                    user_submissions.remove(user_id)
                    try:
                        bot.send_message(
                            user_id,
                            "‚åõ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ç–µ–∫–ª–æ! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                            reply_markup=Menu.contests_menu(),
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            time.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {str(e)}", exc_info=True)


threading.Thread(target=check_timeout, daemon=True).start()

# –†–ï–ü–ö–ê


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_TURNIP)
def handle_user_turnip(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(
            text=ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU
        ),
    )
    bot.edit_message_text(
        f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ–ø–æ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –º—ã –µ—ë –≤–æ–∑–æ–±–Ω–æ–≤–∏–º!",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
    )


# –°–û–û–ë–©–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_TO_ADMIN)
def handle_user_to_admin(call):
    user_id = call.from_user.id
    user_content_storage.init_content(user_id, ADMIN_CHAT_ID)

    bot.set_state(
        user_id,
        UserState.WAITING_ADMIN_CONTENT,
    )

    bot.send_message(
        call.message.chat.id,
        "üì§ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å? –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å:\n"
        "- –¢–µ–∫—Å—Ç\n- –î–æ 10 —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º/–±–µ–∑\n"
        "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        reply_markup=types.ForceReply(),
    )


@bot.message_handler(
    content_types=["text", "photo"],
    func=lambda message: bot.get_state(message.from_user.id)
    in [UserState.WAITING_ADMIN_CONTENT],
)
def handle_user_content(message):
    user_id = message.from_user.id
    content_data = user_content_storage.get_data(user_id)

    try:
        if message.content_type == "photo":
            if len(content_data["photos"]) >= 10:
                bot.reply_to(message, "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ!")
                return

            photo_id = message.photo[-1].file_id
            user_content_storage.add_photo(user_id, photo_id)

            if message.caption:
                user_content_storage.set_text(user_id, message.caption)

        elif message.content_type == "text":
            user_content_storage.set_text(user_id, message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å
        if message.content_type == "text" or len(content_data["photos"]) > 0:
            send_to_admin_chat(user_id, content_data)
            user_content_storage.clear(user_id)
            bot.delete_state(user_id)

    except Exception as e:
        logger.error(f"Content sending error: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")


def send_to_admin_chat(user_id, content_data):
    try:
        logger.debug("send_to_admin_chat - ", content_data)
        target_chat = content_data["target_chat"]
        text = content_data["text"]
        photos = content_data["photos"]

        user = bot.get_chat(user_id)
        user_info = f"\n\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: "
        if user.username:
            user_info += f"@{user.username}"
            if user.first_name:
                user_info += f" ({user.first_name}"
                if user.last_name:
                    user_info += f" {user.last_name}"
                user_info += ")"
        else:
            user_info += f"[id:{user_id}]"
            if user.first_name:
                user_info += f" {user.first_name}"
                if user.last_name:
                    user_info += f" {user.last_name}"

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}"
            )
        )

        if photos:
            media = [
                types.InputMediaPhoto(
                    photo, caption=f"{text or ''}{user_info}" if i == 0 else None
                )
                for i, photo in enumerate(photos)
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –ë–ï–ó reply_markup
            sent_messages = bot.send_media_group(target_chat, media)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –≥—Ä—É–ø–ø–µ
            bot.edit_message_reply_markup(
                chat_id=target_chat,
                message_id=sent_messages[-1].message_id,
                reply_markup=markup,
            )

        elif text:
            full_text = f"{text}{user_info}"
            bot.send_message(target_chat, full_text, reply_markup=markup)

        bot.send_message(
            user_id,
            "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=Menu.back_user_only_main_menu(),
        )

    except Exception as e:
        logger.error(f"Forward error: {e}")
        bot.send_message(
            user_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            reply_markup=Menu.back_user_only_main_menu(),
        )


@bot.message_handler(
    commands=["cancel"],
    func=lambda message: bot.get_state(message.from_user.id)
    in [
        UserState.WAITING_ADMIN_CONTENT,
        UserState.WAITING_NEWS_SCREENSHOTS,
        UserState.WAITING_NEWS_DESCRIPTION,
        UserState.WAITING_NEWS_SPEAKER,
        UserState.WAITING_NEWS_ISLAND,
        UserState.WAITING_CODE_VALUE,
        UserState.WAITING_CODE_SCREENSHOTS,
        UserState.WAITING_CODE_SPEAKER,
        UserState.WAITING_CODE_ISLAND,
        UserState.WAITING_POCKET_SCREENS,
        UserState.WAITING_DESIGN_CODE,
        UserState.WAITING_DESIGN_DESIGN_SCREEN,
        UserState.WAITING_DESIGN_GAME_SCREENS,
    ],
)
def handle_cancel(message):
    user_id = message.from_user.id
    user_content_storage.clear(user_id)
    bot.delete_state(user_id)
    bot.send_message(
        message.chat.id,
        "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=Menu.back_user_only_main_menu(),
    )


# –û–¢–ü–†–ê–í–ö–ê –ù–û–í–û–°–¢–ï–ô


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_TO_NEWS)
def handle_user_to_news(call):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if not is_user_in_chat(call.from_user.id):
        bot.send_message(
            call.message.chat.id,
            "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ!\n"
            + Links.get_chat_url(),
            reply_markup=Menu.back_user_only_main_menu(),
        )
        return
    user_id = call.from_user.id
    user_content_storage.init_content(user_id, NEWSPAPER_CHAT_ID)

    bot.edit_message_text(
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É?",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=Menu.news_menu(),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_NEWS
)
def handle_user_news_news(call):
    user_id = call.from_user.id
    user_content_storage.init_news(user_id)
    bot.set_state(user_id, UserState.WAITING_NEWS_SCREENSHOTS)
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó ForceReply
    bot.edit_message_text(
        text="üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ForceReply
    bot.send_message(
        call.message.chat.id,
        "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ:",
        parse_mode="Markdown",
        reply_markup=types.ForceReply(selective=True),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_CODE
)
def handle_news_code(call):
    user_id = call.from_user.id
    user_content_storage.init_code(user_id)
    bot.set_state(user_id, UserState.WAITING_CODE_VALUE)
    bot.edit_message_text(
        text="üî¢ –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥\n–§–æ—Ä–º–∞—Ç (–≤–∞–∂–µ–Ω): –∫–æ–¥ —Å–Ω–∞ DA-0000-0000-0000, –∫–æ–¥ –∫—É—Ä–æ—Ä—Ç–Ω–æ–≥–æ –±—é—Ä–æ RA-0000-0000-0000 (–≤–º–µ—Å—Ç–æ 0 —Ü–∏—Ñ—Ä—ã)",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )
    bot.send_message(
        call.message.chat.id,
        "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:",
        parse_mode="Markdown",
        reply_markup=types.ForceReply(selective=True),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_POCKET
)
def handle_news_pocket(call):
    user_id = call.from_user.id
    user_content_storage.init_pocket(user_id)
    bot.set_state(user_id, UserState.WAITING_POCKET_SCREENS)
    bot.edit_message_text(
        text='üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ 2 —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥—Ä—É–∂–±—ã (–ª–∏—Ü–µ–≤–∞—è –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, –ª—É—á—à–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "SAVE")',
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )
    bot.send_message(
        call.message.chat.id,
        "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ:",
        parse_mode="Markdown",
        reply_markup=types.ForceReply(selective=True),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_DESIGN
)
def handle_news_design(call):
    user_id = call.from_user.id
    user_content_storage.init_design(user_id)
    bot.set_state(user_id, UserState.WAITING_DESIGN_CODE)
    bot.edit_message_text(
        text="üé® –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–∏–∑–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`MA-0000-0000-0000`",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )
    bot.send_message(
        call.message.chat.id,
        "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:",
        parse_mode="Markdown",
        reply_markup=types.ForceReply(selective=True),
    )


def validate_code(pattern, code):
    return re.match(pattern, code.strip(), re.IGNORECASE) is not None


def parse_speaker_info(text):
    parts = [p.strip() for p in text.split(",", 1)]
    return parts[0], parts[1] if len(parts) > 1 else None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_NEWS
@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_SCREENSHOTS,
)
def handle_news_screenshots(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)

    try:
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ file_unique_id (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        unique_photos = {}
        for photo in reversed(message.photo):
            unique_photos[photo.file_unique_id] = photo.file_id

        new_files = list(unique_photos.values())

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if len(data["photos"]) + len(new_files) > 10:
            raise ValueError("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ file_id
        data["photos"].extend(new_files)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_files)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        if not data.get("description_requested"):
            bot.set_state(user_id, UserState.WAITING_NEWS_DESCRIPTION)
            data["description_requested"] = True
            bot.send_message(
                message.chat.id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ /skip):"
            )

    except ValueError as e:
        bot.reply_to(message, f"‚ùå {str(e)}!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")


@bot.message_handler(
    commands=["skip"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_DESCRIPTION,
)
def skip_news_description(message):
    user_id = message.from_user.id
    bot.set_state(user_id, UserState.WAITING_NEWS_SPEAKER)
    bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:")


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_DESCRIPTION,
)
def handle_news_description(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)
    data["description"] = message.text
    bot.set_state(user_id, UserState.WAITING_NEWS_SPEAKER)
    bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:")


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_SPEAKER,
)
def handle_news_speaker(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)
    data["speaker"] = message.text
    bot.set_state(user_id, UserState.WAITING_NEWS_ISLAND)
    bot.send_message(message.chat.id, "üèùÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞:")


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_ISLAND,
)
def handle_news_island(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)
    data["island"] = message.text
    send_to_news_chat(user_id, data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_CODE
@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_VALUE,
)
def handle_code_value(message):
    user_id = message.from_user.id
    code = message.text.upper()

    if not validate_code(r"^[DR]A-\d{4}-\d{4}-\d{4}$", code):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞! –ü—Ä–∏–º–µ—Ä: DA-1234-5678-9012")
        return

    user_content_storage.get_data(user_id)["code"] = code
    bot.set_state(user_id, UserState.WAITING_CODE_SCREENSHOTS)
    bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:")


@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_SCREENSHOTS,
)
def handle_code_screenshots(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)

    if len(message.photo) + len(data.get("photos", [])) > 10:
        bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ!")
        return

    data["photos"].extend([p.file_id for p in message.photo])
    bot.set_state(user_id, UserState.WAITING_CODE_SPEAKER)
    bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:")


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_SPEAKER,
)
def handle_code_speaker(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)
    data["speaker"] = message.text
    bot.set_state(user_id, UserState.WAITING_CODE_ISLAND)
    bot.send_message(message.chat.id, "üèùÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞:")


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_ISLAND,
)
def handle_code_island(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)
    data["island"] = message.text
    send_to_news_chat(user_id, data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_POCKET
@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_POCKET_SCREENS,
)
def handle_pocket_screens(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if len(message.photo) != 2:
        bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–≤–Ω–æ 2 —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
        return

    data["photos"] = [p.file_id for p in message.photo]
    send_to_news_chat(user_id, data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_DESIGN
@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_DESIGN_CODE,
)
def handle_design_code(message):
    user_id = message.from_user.id
    code = message.text.upper()

    if not validate_code(r"^MA-\d{4}-\d{4}-\d{4}$", code):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: MA-1234-5678-9012")
        return

    user_content_storage.get_data(user_id)["code"] = code
    bot.set_state(user_id, UserState.WAITING_DESIGN_DESIGN_SCREEN)
    bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞:")


@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id)
    == UserState.WAITING_DESIGN_DESIGN_SCREEN,
)
def handle_design_screen(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if len(message.photo) != 1:
        bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–≤–Ω–æ 1 —Å–∫—Ä–∏–Ω—à–æ—Ç –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
        return

    data["design_screen"] = message.photo[-1].file_id
    bot.set_state(user_id, UserState.WAITING_DESIGN_GAME_SCREENS)
    bot.send_message(
        message.chat.id, "üéÆ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 9 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞ –≤ –∏–≥—Ä–µ:"
    )


@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id)
    == UserState.WAITING_DESIGN_GAME_SCREENS,
)
def handle_game_screens(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id)

    remaining = 9 - len(data.get("game_screens", []))
    if len(message.photo) > remaining:
        bot.reply_to(message, f"‚ùå –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {remaining} —Ñ–æ—Ç–æ!")
        return

    data["game_screens"].extend([p.file_id for p in message.photo])
    send_to_news_chat(user_id, data)


def send_to_news_chat(user_id, content_data):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        data = user_content_storage.get_data(user_id)
        target_chat = NEWSPAPER_CHAT_ID
        user = bot.get_chat(user_id)
        logger = logging.getLogger(__name__)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        user_info = "\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: "
        if user.username:
            user_info += f"@{user.username}"
            name_parts = []
            if user.first_name:
                name_parts.append(user.first_name)
            if user.last_name:
                name_parts.append(user.last_name)
            if name_parts:
                user_info += f" ({' '.join(name_parts)})"
        else:
            name_parts = []
            if user.first_name:
                name_parts.append(user.first_name)
            if user.last_name:
                name_parts.append(user.last_name)
            user_info += (
                f"{' '.join(name_parts)} [ID: {user_id}]"
                if name_parts
                else f"[ID: {user_id}]"
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        media = []
        text = ""
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}"
            )
        )

        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        unique_files = []
        seen_ids = set()

        if data["type"] == "news":
            # –ù–æ–≤–æ—Å—Ç–∏
            text = f"üì∞ {ButtonText.USER_NEWS_NEWS}\n"
            if data.get("description"):
                text += f"\nüìù {data['description']}"
            text += f"\nüë§ –°–ø–∏–∫–µ—Ä: {data.get('speaker', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            text += f"\nüèùÔ∏è –û—Å—Ç—Ä–æ–≤: {data.get('island', '–ù–µ —É–∫–∞–∑–∞–Ω')}{user_info}"

            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ñ–æ—Ç–æ
            for photo in data.get('photos', []):
                file_info = bot.get_file(photo)
                if file_info.file_unique_id not in seen_ids:
                    unique_files.append(photo)
                    seen_ids.add(file_info.file_unique_id)

            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            for i, file_id in enumerate(unique_files):
                media.append(
                    types.InputMediaPhoto(file_id, caption=text if i == 0 else None)
                )

        elif data["type"] == "code":
            # –ö–æ–¥—ã
            text = f"üî¢ {ButtonText.USER_NEWS_CODE}\n"
            text += f"\n–ö–æ–¥: {data.get('code', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            text += f"\nüë§ –°–ø–∏–∫–µ—Ä: {data.get('speaker', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            text += f"\nüèùÔ∏è –û—Å—Ç—Ä–æ–≤: {data.get('island', '–ù–µ —É–∫–∞–∑–∞–Ω')}{user_info}"

            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ñ–æ—Ç–æ
            for file_id in data["photos"]:
                if file_id not in seen_ids:
                    unique_files.append(file_id)
                    seen_ids.add(file_id)

            for i, file_id in enumerate(unique_files):
                media.append(
                    types.InputMediaPhoto(file_id, caption=text if i == 0 else None)
                )

        elif data["type"] == "pocket":
            # –ö–∞—Ä—Ç–æ—á–∫–∏ –¥—Ä—É–∂–±—ã
            text = f"üëã {ButtonText.USER_NEWS_POCKET}{user_info}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
            if len(data["photos"]) != 2:
                raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥—Ä—É–∂–±—ã")

            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            unique_files = list({photo: photo for photo in data["photos"]}.values())

            media = [types.InputMediaPhoto(photo) for photo in unique_files]
            if media:
                media[0].caption = text

        elif data["type"] == "design":
            # –î–∏–∑–∞–π–Ω—ã
            text = f"üé® {ButtonText.USER_NEWS_DESIGN}\n"
            text += f"\n–ö–æ–¥: {data.get('code', '–ù–µ —É–∫–∞–∑–∞–Ω')}{user_info}"

            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            if not data.get("design_screen"):
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–∏–∑–∞–π–Ω–∞")

            media.append(types.InputMediaPhoto(data["design_screen"], caption=text))

            # –ò–≥—Ä–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            unique_game_screens = list(
                {p: p for p in data.get("game_screens", [])}.values()
            )
            media.extend([types.InputMediaPhoto(p) for p in unique_game_screens])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            if media:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–∑ {len(media)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                sent_messages = bot.send_media_group(target_chat, media)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å
                if any(m.caption for m in media):
                    try:
                        bot.edit_message_reply_markup(
                            chat_id=target_chat,
                            message_id=sent_messages[-1].message_id,
                            reply_markup=markup,
                        )
                    except ApiTelegramException as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É: {e}")
                        bot.send_message(
                            target_chat, "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=markup
                        )
                else:
                    bot.send_message(target_chat, "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=markup)
            else:
                logger.warning("–ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                bot.send_message(target_chat, text, reply_markup=markup)

        except ApiTelegramException as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e.description}"
            logger.error(error_msg)
            raise Exception(error_msg)

        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        bot.send_message(
            user_id,
            "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=Menu.back_user_only_main_menu(),
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg, exc_info=True)
        bot.send_message(
            user_id,
            f"{error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=Menu.back_user_only_main_menu(),
        )
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_content_storage.clear(user_id)
        bot.delete_state(user_id)
        logger.debug("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã")
