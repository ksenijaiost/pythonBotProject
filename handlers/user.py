from datetime import datetime
from telebot import types
from database.contest import ContestManager
from bot_instance import bot
from menu.menu import Menu
from menu.constants import ButtonCallback, ButtonText, ConstantLinks

@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_CONTEST_INFO)
def handle_user_contest_info(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ
        contest = ContestManager.get_current_contest()
        
        if not contest:
            # –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ
            text = "üéâ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            markup = Menu.back_to_main_menu()
        else:
            current_date = datetime.now().date()
            end_date_obj = datetime.strptime(contest[4], "%d.%m.%Y").date()

            if end_date_obj < current_date:
                text += "\n\n‚ùóÔ∏è *–ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!*"

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            theme = contest[1]
            description = contest[2]
            contest_date = datetime.strptime(contest[3], "%d.%m.%Y").strftime("%d %B %Y")
            end_date_of_admission = datetime.strptime(contest[4], "%d.%m.%Y").strftime("%d %B %Y")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                f"üèÜ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å!*\n\n"
                f"üìå *–¢–µ–º–∞:* {theme}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                f"üóì *–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:*\n"
                f"‚û°Ô∏è –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: {contest_date}\n"
                f"‚û°Ô∏è –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –¥–æ: {end_date_of_admission}\n\n"
                f"–ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É—á–∞—Å—Ç–∏—è (–∏ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤) –ø–æ —Å—Å—ã–ª–∫–µ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton(
                    text="üìú –ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è", 
                    url=ConstantLinks.CONTEST_LINK
                )
            )
            markup.row(
                types.InlineKeyboardButton(ButtonText.BACK, callback_data=ButtonCallback.USER_CONTEST),
                types.InlineKeyboardButton(ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU)
            )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—É—Ä—Å–µ: {e}")
        bot.answer_callback_query(
            call.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            show_alert=True
        )