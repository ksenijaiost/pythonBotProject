from datetime import datetime
import logging
import threading
import re
from telebot.apihelper import ApiTelegramException
from collections import defaultdict
from venv import logger
from telebot import types
import time
from database.contest import (
    ContestManager,
    ContestSubmission,
    SubmissionManager,
    is_user_approved,
    user_submissions,
    user_content_storage,
)
from bot_instance import bot
from handlers.envParams import (
    ADMIN_CHAT_ID,
    NEWSPAPER_CHAT_ID,
    ADMIN_USERNAME,
    CHAT_ID,
    CONTEST_CHAT_ID,
    CHAT_USERNAME,
)
from handlers.decorator import private_chat_only
from menu.links import Links
from menu.menu import Menu
from menu.constants import (
    MONTHS_RU,
    ButtonCallback,
    ButtonText,
    ConstantLinks,
    UserState,
)


from threading import Lock
from weakref import WeakValueDictionary

logging.basicConfig(
    filename="bot.log",
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG,
)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
media_groups = defaultdict(list)
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
temp_storage = {}


def is_user_in_chat(user_id):
    try:
        chat_member = bot.get_chat_member(CHAT_ID, user_id)
        return chat_member.status not in ["left", "kicked"]
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞: {e}")
        return False


# –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–æ–¥–∞
class UserLock:
    def __init__(self):
        self.locks = defaultdict(Lock)  # –ë–∞–∑–æ–≤—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ user_id
        self.media_group_locks = defaultdict(
            Lock
        )  # –û—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
        self.current_media_groups = {}  # –¢–µ–∫—É—â–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        self.global_lock = Lock()
        self.last_activity = {}  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç

    def acquire(self, user_id: int) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.global_lock:
            acquired = self.locks[user_id].acquire(blocking=False)
            if acquired:
                self.last_activity[user_id] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            return acquired

    def release(self, user_id: int) -> None:
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.global_lock:
            if user_id in self.locks:
                try:
                    self.locks[user_id].release()
                    self.last_activity[user_id] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                except RuntimeError:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è

    def acquire_for_media_group(self, user_id: int, media_group_id: str) -> bool:
        """–ó–∞—Ö–≤–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã"""
        if media_group_id in self.current_media_groups.get(user_id, set()):
            return True  # –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        with self.locks[user_id]:
            self.current_media_groups.setdefault(user_id, set()).add(media_group_id)
            return self.media_group_locks[media_group_id].acquire(blocking=False)

    def release_media_group(self, user_id: int, media_group_id: str):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã"""
        with self.locks[user_id]:
            if media_group_id in self.current_media_groups.get(user_id, set()):
                self.media_group_locks[media_group_id].release()
                self.current_media_groups[user_id].remove(media_group_id)

    def cleanup(self, max_age=300):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ä—à–µ max_age —Å–µ–∫—É–Ω–¥"""
        with self.global_lock:
            now = time.time()
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            for user_id in list(self.last_activity.keys()):
                if now - self.last_activity.get(user_id, 0) > max_age:
                    del self.locks[user_id]
                    del self.last_activity[user_id]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
user_locks = UserLock()


def lock_input(allow_media_groups: bool = False):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø"""

    def decorator(func):
        def wrapper(message_or_call):
            user_id = message_or_call.from_user.id
            media_group_id = getattr(message_or_call, "media_group_id", None)

            # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if allow_media_groups and media_group_id:
                if not user_locks.acquire_for_media_group(user_id, media_group_id):
                    return
            else:
                if not user_locks.acquire(user_id):
                    error_msg = (
                        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\!"
                    )
                    if hasattr(message_or_call, "message"):
                        bot.answer_callback_query(message_or_call.id, error_msg)
                    else:
                        bot.reply_to(message_or_call, error_msg)
                    return

            try:
                return func(message_or_call)
            finally:
                if allow_media_groups and media_group_id:
                    user_locks.release_media_group(user_id, media_group_id)
                else:
                    user_locks.release(user_id)

        return wrapper

    return decorator


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏
def run_cleanup():
    while True:
        try:
            user_locks.cleanup()
        except Exception as e:
            logger.error(f"Cleanup error: {str(e)}")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


# –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_cleanup, daemon=True).start()


# –°–±–æ—Ä "–Æ–∑–µ—Ä –∏–Ω—Ñ–æ"
def get_user_info(user):
    user_info = f"\n\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: "
    if user.username:
        user_info += f"@{user.username}"
        if user.first_name:
            user_info += f" ({user.first_name}"
            if user.last_name:
                user_info += f" {user.last_name}"
            user_info += ")"
    else:
        user_info += f"[id:{user.id}]"
        if user.first_name:
            user_info += f" {user.first_name}"
            if user.last_name:
                user_info += f" {user.last_name}"
    return user_info


# –ü–û–ú–û–©–¨
@bot.message_handler(commands=["help"])
def handle_help(message):
    user_id = message.from_user.id
    current_state = bot.get_state(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    help_text = (
        "‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n\n"
        f"*{ButtonText.USER_GUIDES}*: –≥–∞–π–¥—ã –ø–æ Animal Crossing –∏ –Ω–µ —Ç–æ–ª—å–∫–æ;\n\n"
        f"*{ButtonText.USER_CONTEST}*: –≤—Å—ë –æ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:\n"
        f"*{ButtonText.USER_CONTEST_INFO}*: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ, –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–æ—à–ª—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã,\n"
        f"*{ButtonText.USER_CONTEST_SEND}*: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ,\n"
        f"*{ButtonText.USER_CONTEST_JUDGE}*: _–ø–µ—Ä–µ—à–ª—é –í–∞—à–µ –∂–µ–ª–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞–º_;\n\n"
        f"*{ButtonText.USER_TO_ADMIN}*: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º —á–∞—Ç–∞;\n"
        f"*{ButtonText.USER_TO_NEWS}*: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–æ–¥–æ–≤ —Å–Ω–∞, –¥–∞—á, –¥–∏–∑–∞–π–Ω–∞ –∏ PocketCamp;\n"
        f"*{ButtonText.USER_TURNIP}*: –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, _–ø–æ–∑–∂–µ —Ç—É—Ç –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞—Ç—å —Ä–µ–ø—É –∞–¥–º–∏–Ω–∞–º –ø–æ —Å—É–±–±–æ—Ç–∞–º_;\n"
        f"*{ButtonText.USER_HEAD_CHAT}*: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç–∏–∫ –ø–æ Animal Crossing;\n"
        f"*{ButtonText.USER_CHANEL}*: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –∞–Ω–æ–Ω—Å–∞–º–∏, –∏–¥–µ—è–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—è–º–∏;\n"
        f"*{ButtonText.USER_CHAT_NINTENDO}*: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π –Ω–∞ —Ç–µ–º—ã –ø–æ –∏–≥—Ä–∞–º Nintendo, –∞ —Ç–∞–∫–∂–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—Ñ—Ñ—Ç–æ–ø —Ç–µ–º–æ–π"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
            types.InlineKeyboardButton(
                text=ButtonText.USER_HELP_SITE, url=ConstantLinks.HELP_LINK
            )
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state:
        help_text += "\n\n –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n"
        help_text += "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /cancel\n"
        help_text += "üîÑ –î–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start, _—Å–±—Ä–æ—Å–∏—Ç—Å—è —Ç–æ, —á—Ç–æ –í—ã –¥–µ–ª–∞–ª–∏, –∞ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è_"
    else:
        markup.add(
            types.InlineKeyboardButton(
                text=ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU
            )
        )

    help_text += "\n\nüìö –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ"

    bot.send_message(
        user_id,
        help_text,
        parse_mode="MarkdownV2",
        reply_markup=markup,
        disable_web_page_preview=True,
    )


# –ì–ê–ô–î–´


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_GUIDES)
@private_chat_only(bot)
def handle_user_guides(call):
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ú–µ–Ω—é –≥–∞–π–¥–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.guides_menu(),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_FIND_GUIDE,
)
@private_chat_only(bot)
def handle_user_find_guide(call):
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.send_message(
        text="üò≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω,\n–Ω–æ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–∞–π–¥—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ ü§ó",
        chat_id=call.message.chat.id,
        reply_markup=Menu.guides_menu(),
    )


# –ö–û–ù–ö–£–†–°–´


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@bot.message_handler(
    commands=["cancel"],
    func=lambda message: bot.get_state(message.from_user.id)
    in [
        UserState.WAITING_CONTEST_PHOTOS,
        UserState.WAITING_CONTEST_TEXT,
        UserState.WAITING_CONTEST_PREVIEW,
    ],
)
def handle_cancel(message):
    user_id = message.from_user.id
    if user_submissions.exists(user_id):
        user_submissions.remove(user_id)
    bot.delete_state(user_id)
    bot.send_message(
        message.chat.id,
        "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=Menu.back_user_only_main_menu(),
    )


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_CONTEST)
@private_chat_only(bot)
def handle_user_guides(call):
    logger = logging.getLogger(__name__)
    logger.debug(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ú–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.contests_menu(),
    )


def format_date_ru(date_str: str) -> str:
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
        return f"{date_obj.day} {MONTHS_RU[date_obj.month]} {date_obj.year}"
    except:
        return date_str


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_CONTEST_INFO,
)
@lock_input()
@private_chat_only(bot)
def handle_user_contest_info(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ
        contest = ContestManager.get_current_contest()

        text = ""

        if not contest:
            # –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ
            text = (
                "üéâ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏\!"
            )
            markup = Menu.back_user_contest_menu()
        else:
            current_date = datetime.now().date()
            end_date_obj = datetime.strptime(contest[4], "%d.%m.%Y").date()

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            theme = contest[1]
            description = contest[2]
            contest_date = format_date_ru(contest[3])
            end_date_of_admission = format_date_ru(contest[4])

            text = (
                f"üèÜ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å*\n\n"
                f"üìå *–¢–µ–º–∞:* {theme}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                f"üóì *–î–∞—Ç—ã:*\n"
                f"‚è≥ –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –¥–æ *{end_date_of_admission}*\n"
                f"üéâ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: *{contest_date}*\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∏—Å—Ç—ë–∫
            if end_date_obj < current_date:
                text += "‚ùóÔ∏è*–ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω\!* _–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏_\!\n\n"

            text += "–ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É—á–∞—Å—Ç–∏—è _\(–∏ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤\)_ –ø–æ —Å—Å—ã–ª–∫–µ:"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton(
                    text="üìú –ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è", url=ConstantLinks.CONTEST_LINK
                )
            )
            markup.row(
                types.InlineKeyboardButton(
                    ButtonText.BACK, callback_data=ButtonCallback.USER_CONTEST
                ),
                types.InlineKeyboardButton(
                    ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU
                ),
            )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=markup,
            parse_mode="MarkdownV2",
        )

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—É—Ä—Å–µ: {e}")
        bot.answer_callback_query(
            call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True
        )


SUBMISSION_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_CONTEST_SEND,
)
@lock_input()
@private_chat_only(bot)
def start_contest_submission(call):
    try:
        user_id = call.from_user.id
        if user_id in temp_storage:
            del temp_storage[user_id]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ
        contest = ContestManager.get_current_contest()
        if not contest:
            # –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ
            bot.answer_callback_query(
                call.id,
                "üéâ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏\!",
                show_alert=True,
            )
            return
        else:
            current_date = datetime.now().date()
            end_date_obj = datetime.strptime(contest[4], "%d.%m.%Y").date()
            if end_date_obj < current_date:
                bot.answer_callback_query(
                    call.id,
                    "‚ùóÔ∏è–ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω\! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏\!",
                    show_alert=True,
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ exists
            if user_submissions.exists(user_id) or is_user_approved(user_id):
                bot.answer_callback_query(
                    call.id,
                    "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞–±–æ—Ç—É\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∞–º–∏",
                    show_alert=True,
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
            if not is_user_in_chat(call.from_user.id):
                bot.send_message(
                    call.message.chat.id,
                    "‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ\n"
                    + Links.get_chat_url(),
                    reply_markup=Menu.contests_menu(),
                )
                return

            user_id = call.from_user.id
            submission = ContestSubmission()
            bot.set_state(user_id, UserState.WAITING_CONTEST_PHOTOS)
            submission.status = UserState.WAITING_CONTEST_PHOTOS  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            user_submissions.add(user_id, submission)

            text = "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–±–æ—Ç—É _–¥–æ 10 —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –µ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –ø–æ–∑–∂–µ_\n"

            if SubmissionManager.delete_judge(user_id):
                text += "\n–í—ã –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—É–¥–µ–π"

            text += "\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"

            bot.send_message(
                call.message.chat.id,
                text,
                parse_mode="MarkdownV2",
            )

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        handle_submission_error(call.from_user.id, e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—Ç
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏—ë–º–∞ —Ñ–æ—Ç–æ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö —Ä–∞–±–æ—Ç
@bot.message_handler(
    content_types=["photo"],
    func=lambda m: user_submissions.exists(m.from_user.id)
    and user_submissions.get(m.from_user.id).status == UserState.WAITING_CONTEST_PHOTOS,
)
@lock_input(allow_media_groups=True)
def handle_contest_photos(message):
    user_id = message.from_user.id
    submission = user_submissions.get(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    submission.update_activity()
    user_submissions.update_last_activity(user_id)

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if submission.progress_message_id:
            try:
                bot.delete_message(message.chat.id, submission.progress_message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞–∏–±–æ–ª—å—à–∏–π)
        original_photo = message.photo[-1]
        unique_id = original_photo.file_unique_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        existing_ids = {p["unique_id"] for p in submission.photos}
        if unique_id in existing_ids:
            bot.reply_to(message, "‚ùå –≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if len(submission.photos) >= 10:
            bot.reply_to(message, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ!")
            request_contest_description(user_id)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        submission.photos.append({
            "file_id": original_photo.file_id,
            "unique_id": unique_id
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        submission.last_activity = time.time()

        # –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if len(submission.photos) == 10:
            request_contest_description(user_id)
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar = "üü™" * len(submission.photos) + "‚óªÔ∏è" * (10 - len(submission.photos))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = bot.reply_to(
                message,
                f"{progress_bar}\n"
                f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ: {len(submission.photos)}/10\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done\n\n"
                "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
            )
            submission.progress_message_id = sent_msg.message_id

    except Exception as e:
        handle_submission_error(user_id, e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
@bot.message_handler(
    commands=["done"],
    func=lambda m: user_submissions.exists(m.from_user.id)
    and user_submissions.get(m.from_user.id).status == UserState.WAITING_CONTEST_PHOTOS,
)
@lock_input()
def handle_done_contest_photos(message):
    user_id = message.from_user.id
    submission = user_submissions.get(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    submission.update_activity()
    user_submissions.update_last_activity(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if len(submission.photos) == 0:
        bot.reply_to(message, "‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if submission.progress_message_id:
        try:
            bot.delete_message(message.chat.id, submission.progress_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    request_contest_description(user_id)

def request_contest_description(user_id):
    submission = user_submissions.get(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    submission.update_activity()
    user_submissions.update_last_activity(user_id)

    submission.status = UserState.WAITING_CONTEST_TEXT
    bot.set_state(user_id, UserState.WAITING_CONTEST_TEXT)
    
    bot.send_message(
        user_id,
        "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ _–Ω–µ –ø—Ä–µ–º–∏—É–º_\n"
        "–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        parse_mode="MarkdownV2",
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: user_submissions.exists(m.from_user.id)
    and user_submissions.get(m.from_user.id).status == UserState.WAITING_CONTEST_TEXT,
)
@lock_input()
def handle_text(message):
    user_id = message.from_user.id
    submission = user_submissions.get(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    submission.update_activity()
    user_submissions.update_last_activity(user_id)

    try:
        submission.caption = message.text
        submission.status = UserState.WAITING_CONTEST_PREVIEW
        bot.set_state(user_id, UserState.WAITING_CONTEST_PREVIEW)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        media = [types.InputMediaPhoto(pid['file_id']) for pid in submission.photos]
        bot.send_media_group(user_id, media)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞ –º–µ–Ω—è", callback_data="send_by_bot_yes"
            ),
            types.InlineKeyboardButton(
                "–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—é —Å–∞–º(–∞)", callback_data="send_by_bot_no"
            ),
        )
        markup.row(
            types.InlineKeyboardButton(
                "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–±–æ—Ç—ã", callback_data="cancel_submission"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã\n\n–¢–µ–∫—Å—Ç:\n{submission.caption}\n\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –∑–∞ –í–∞—Å?",
            reply_markup=markup,
        )
    except Exception as e:
        handle_submission_error(user_id, e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_by_bot_"))
@lock_input()
def handle_send_method(call):
    user_id = call.from_user.id
    if not user_submissions.exists(user_id):
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–∞")
        return

    try:
        submission = user_submissions.get(user_id)
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        submission.update_activity()
        user_submissions.update_last_activity(user_id)

        user = bot.get_chat(user_id)
        full_name = (
            f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
        )
        username = user.username if user.username else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—É –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
        submission_id = SubmissionManager.create_submission(
            user_id=user_id,
            username=username,
            full_name=full_name,
            photos=submission.photos,
            caption=submission.caption,
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        SubmissionManager.update_submission(submission_id, status="pending")

        send_by_bot = call.data == "send_by_bot_yes"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è {user_id}: {len(submission.photos)} —Ñ–æ—Ç–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞
        try:
            chat_info = bot.get_chat(CONTEST_CHAT_ID)
        except Exception as e:
            raise Exception(f"–ß–∞—Ç {CONTEST_CHAT_ID} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")

        user_info = get_user_info(bot.get_chat(user_id))
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media = [types.InputMediaPhoto(pid['file_id']) for pid in submission.photos]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫–æ–Ω–∫—É—Ä—Å–∞
        try:
            sent_messages = bot.send_media_group(chat_id=CONTEST_CHAT_ID, media=media)
            logger.info(f"–ú–µ–¥–∏–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {CONTEST_CHAT_ID}: {sent_messages}")
            sent_messages = bot.send_message(
                chat_id=CONTEST_CHAT_ID,
                text=f"{submission.caption}\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º: {'‚úÖ –î–∞' if send_by_bot else '‚ùå –ù–µ—Ç'}{user_info}",
            )
            logger.info(f"–¢–µ–∫—Å—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {CONTEST_CHAT_ID}: {sent_messages}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç: {str(e)}")
            raise

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            chat_id=user_id,
            text="‚úÖ –†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è –ø—Ä–∏—à–ª—é –Ω–æ–º–µ—Ä!",
            reply_markup=Menu.contests_menu(),
        )
        bot.delete_state(user_id)

    except Exception as e:
        handle_submission_error(user_id, e)
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞–º")


@bot.callback_query_handler(func=lambda call: call.data == "cancel_submission")
@lock_input()
def handle_cancel_submission(call):
    user_id = call.from_user.id
    try:
        if user_submissions.exists(user_id):
            user_submissions.remove(user_id)
            bot.delete_state(user_id)
            bot.answer_callback_query(call.id, "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
            for _ in range(2):  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∫–Ω–æ–ø–∫–∏
                try:
                    bot.delete_message(
                        call.message.chat.id, call.message.message_id - _
                    )
                except:
                    pass
            bot.send_message(
                user_id,
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
                reply_markup=Menu.back_user_only_main_menu(),
            )
    except Exception as e:
        handle_submission_error(user_id, e)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_submission_error(user_id, error):
    logger.error(f"[User {user_id}] –û—à–∏–±–∫–∞: {str(error)}", exc_info=True)
    bot.send_message(
        user_id,
        f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @{ADMIN_USERNAME}",
        reply_markup=Menu.contests_menu(),
    )


# –¢–∞–π–º–∞—É—Ç
def check_timeout():
    while True:
        try:
            current_time = time.time()
            for user_id in user_submissions.get_all_users():
                submission = user_submissions.get(user_id)
                if current_time - submission.submission_time > 600:
                    user_submissions.remove(user_id)
                    try:
                        bot.send_message(
                            user_id,
                            "‚åõ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ç–µ–∫–ª–æ\! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ",
                            reply_markup=Menu.contests_menu(),
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            time.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {str(e)}", exc_info=True)


threading.Thread(target=check_timeout, daemon=True).start()


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_CONTEST_JUDGE
)
@private_chat_only(bot)
def handle_contest_judje(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(text="üßë‚Äç‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="new_judge"),
        types.InlineKeyboardButton(
            text=ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU
        ),
    )
    bot.edit_message_text(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞?\n\n"
        "‚ùó–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω–µ–ª—å–∑—è –±—ã—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ —Å—É–¥—å—ë–π, –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º: _–ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –∑–∞–ø–∏—Å—å –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è_\n\n"
        '‚ö†Ô∏è–ó–∞—è–≤–∫–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∞–º–∏ –≤—Ä—É—á–Ω—É—é –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: üö´_–¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞–Ω–µ–µ –ø–æ–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ "—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é_',
        call.message.chat.id,
        call.message.message_id,
        parse_mode="MarkdownV2",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "new_judge")
def handle_new_judge(call):
    user_id = call.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        if SubmissionManager.is_judge(user_id):
            bot.answer_callback_query(
                call.id, "‚ùå –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ\!", show_alert=True
            )
            return
        # –ü—Ä–æ–≤–µ–∫—Ä—è–µ–º –Ω–∞ —É—á–∞—Å—Ç–∏–µ
        if is_user_approved(user_id):
            bot.answer_callback_query(
                call.id, "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞\!", show_alert=True
            )
            return
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
        user = bot.get_chat(user_id)
        full_name = (
            f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
        )
        username = user.username if user.username else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        if SubmissionManager.add_judge(
            user_id=user_id, username=username, full_name=full_name
        ):
            user_info = get_user_info(bot.get_chat(user_id))
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}"
                )
            )
            full_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—É–¥–µ–π—Å—Ç–≤–æ!\n{user_info}"
            bot.send_message(CONTEST_CHAT_ID, full_text, reply_markup=markup)

            bot.send_message(
                user_id,
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                reply_markup=Menu.back_user_only_main_menu(),
            )
        else:
            bot.answer_callback_query(
                call.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∞–º–∏",
                show_alert=True,
            )
    except Exception as e:
        logger.error(f"handle_new_judge error: {e}")
        bot.answer_callback_query(
            call.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∞–º–∏",
            show_alert=True,
        )


# –†–ï–ü–ö–ê


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_TURNIP)
@private_chat_only(bot)
def handle_user_turnip(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(
            text=ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU
        ),
    )
    bot.edit_message_text(
        f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ–ø–æ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –º—ã –µ—ë –≤–æ–∑–æ–±–Ω–æ–≤–∏–º\!",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
    )


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
@bot.message_handler(
    commands=["cancel"],
    func=lambda message: bot.get_state(message.from_user.id)
    in [
        UserState.WAITING_ADMIN_CONTENT,
        UserState.WAITING_ADMIN_CONTENT_PHOTO,
        UserState.WAITING_NEWS_SCREENSHOTS,
        UserState.WAITING_NEWS_DESCRIPTION,
        UserState.WAITING_NEWS_SPEAKER,
        UserState.WAITING_NEWS_ISLAND,
        UserState.WAITING_CODE_VALUE,
        UserState.WAITING_CODE_SCREENSHOTS,
        UserState.WAITING_CODE_SPEAKER,
        UserState.WAITING_CODE_ISLAND,
        UserState.WAITING_POCKET_SCREEN,
        UserState.WAITING_DESIGN_CODE,
        UserState.WAITING_DESIGN_DESIGN_SCREEN,
        UserState.WAITING_DESIGN_GAME_SCREENS,
    ],
)
def handle_cancel(message):
    user_id = message.from_user.id
    user_content_storage.clear(user_id)
    bot.delete_state(user_id)
    bot.send_message(
        message.chat.id,
        "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=Menu.back_user_only_main_menu(),
    )
    if user_id in temp_storage:
        del temp_storage[user_id]


# –°–û–û–ë–©–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_TO_ADMIN)
@lock_input()
@private_chat_only(bot)
def handle_user_to_admin(call):
    user_id = call.from_user.id
    if user_id in temp_storage:
        del temp_storage[user_id]
    user_content_storage.init_content(user_id)

    bot.set_state(
        user_id,
        UserState.WAITING_ADMIN_CONTENT,
    )

    bot.send_message(
        call.message.chat.id,
        "üì§ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º \(–æ —Ñ–æ—Ç–æ —è —Å–ø—Ä–æ—à—É –ø–æ–∑–∂–µ\)\n_–ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç—É—Ç –≤ —á–∞—Ç–µ_\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        parse_mode="MarkdownV2",
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda message: (
        bot.get_state(message.from_user.id) == UserState.WAITING_ADMIN_CONTENT
        and not message.text.startswith("/")
    ),
)
@lock_input()
def handle_user_text(message):
    user_id = message.from_user.id
    content_data = user_content_storage.get_data(user_id, "content")
    content_data["text"] = message.text
    bot.set_state(user_id, UserState.WAITING_ADMIN_CONTENT_PHOTO)
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(
            "‚úÖ –î–∞", callback_data=f"confirm_admphoto:{user_id}"
        ),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"skip_admphoto:{user_id}"),
    )
    markup.row(
        types.InlineKeyboardButton(
            "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data=f"cancel_admphoto:{user_id}"
        )
    )
    bot.send_message(
        message.chat.id,
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?",
        reply_markup=markup,
    )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith(
        ("confirm_admphoto", "skip_admphoto", "cancel_admphoto")
    ),
)
@lock_input()
def handle_confirmation(call):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        if ":" not in call.data:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")

        action, user_id_str = call.data.split(":", 1)
        user_id = int(user_id_str)

        # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if call.from_user.id != user_id:
            bot.answer_callback_query(
                call.id, "‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø", show_alert=True
            )
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        content_data = user_content_storage.get_data(user_id, "content")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not content_data:
            bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        if action == "confirm_admphoto":
            bot.send_message(
                user_id,
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip\n üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
                reply_markup=types.ReplyKeyboardRemove(),
            )

        elif action == "skip_admphoto":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if "text" not in content_data or not content_data["text"].strip():
                bot.send_message(user_id, "‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω\!")
                return

            try:
                preview_to_admin_chat(user_id, content_data)
            except KeyError as e:
                logger.error(f"Missing key in content_data: {str(e)}")
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            except Exception as e:
                logger.error(f"Preview error: {str(e)}")
                bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

        elif action == "cancel_admphoto":
            handle_cancel(call.message)

    except ValueError as ve:
        logger.error(f"Invalid callback data: {call.data} - {str(ve)}")
        handle_submission_error(call.from_user.id, e)

    except Exception as e:
        logger.error(f"Critical error in confirmation: {str(e)}", exc_info=True)
        handle_submission_error(call.from_user.id, e)


@bot.message_handler(
    content_types=["photo"],
    func=lambda message: bot.get_state(message.from_user.id)
    in [UserState.WAITING_ADMIN_CONTENT_PHOTO],
)
@lock_input(allow_media_groups=True)
def handle_adm_photo(message):
    user_id = message.from_user.id
    content_data = user_content_storage.get_data(user_id, "content")
    try:
        if message.photo:
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
            photo_id = message.photo[-1].file_id

            if len(content_data["photos"]) > 10:
                bot.send_message(message.chat.id, "–ú–∞–∫—Å–∏–º—É–º 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\!")
                return

            content_data["photos"].append(photo_id)
            new_count = len(content_data["photos"])
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if content_data.get("counter_msg_id"):
                try:
                    bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=content_data["counter_msg_id"],
                    )
                except Exception as delete_error:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
            msg = bot.send_message(
                message.chat.id,
                f"üì∏ –ü—Ä–∏–Ω—è—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {new_count}/10\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done\n\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            content_data["counter_msg_id"] = msg.message_id
            user_content_storage.update_data(user_id, content_data)

            if new_count == 10:
                preview_to_admin_chat(user_id, content_data)
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—á–µ—Ç—á–∏–∫
                bot.delete_message(message.chat.id, content_data["counter_msg_id"])

        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ")

    except Exception as e:
        logger.error(f"Content sending error: {e}")
        handle_submission_error(message.from_user.id, e)


@bot.message_handler(
    commands=["done"],
    func=lambda message: bot.get_state(message.from_user.id)
    in [UserState.WAITING_ADMIN_CONTENT_PHOTO],
)
@lock_input()
def handle_done(message):
    user_id = message.from_user.id
    content_data = user_content_storage.get_data(user_id, "content")
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—á–µ—Ç—á–∏–∫
    if content_data.get("counter_msg_id"):
        try:
            bot.delete_message(message.chat.id, content_data["counter_msg_id"])
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    preview_to_admin_chat(user_id, content_data)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_content_storage.clear(user_id)


def preview_to_admin_chat(user_id, content_data):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    temp_storage[user_id] = content_data

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if content_data["photos"]:
        media = [types.InputMediaPhoto(pid) for pid in content_data["photos"]]
        bot.send_media_group(user_id, media)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(
            "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_send:{user_id}"
        ),
        types.InlineKeyboardButton(
            "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_send:{user_id}"
        ),
    )
    bot.send_message(
        user_id,
        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{content_data['text']}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º?",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(
    func=lambda call: call.data.startswith(("confirm_send", "cancel_send")),
)
@lock_input()
def handle_confirmation(call):
    try:
        action, user_id = call.data.split(":")
        user_id = int(user_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(call.message.chat.id, call.message.message_id)

        if action == "confirm_send":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            content_data = temp_storage.get(user_id)

            if content_data:
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_to_admin_chat(user_id, content_data)
                bot.answer_callback_query(call.id, "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            else:
                bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")

        elif action == "cancel_send":
            bot.answer_callback_query(call.id, "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    except Exception as e:
        logger.error(f"Confirmation error: {e}")

    finally:
        # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if user_id in temp_storage:
            del temp_storage[user_id]


def send_to_admin_chat(user_id, content_data):
    try:
        logger.debug("send_to_admin_chat: ", content_data)
        target_chat = ADMIN_CHAT_ID
        text = content_data["text"]
        photos = content_data["photos"]

        user_info = get_user_info(bot.get_chat(user_id))

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}"
            )
        )

        if photos:
            media = [
                types.InputMediaPhoto(
                    media=photo_id, caption=content_data["text"] if i == 0 else ""
                )
                for i, photo_id in enumerate(content_data["photos"])
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –ë–ï–ó reply_markup
            bot.send_media_group(target_chat, media)

            bot.send_message(
                target_chat,
                text=f"{user_info}\n–•–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å?",
                reply_markup=markup,
            )

        elif text:
            full_text = f"{text}{user_info}"
            bot.send_message(target_chat, full_text, reply_markup=markup)

        bot.send_message(
            user_id,
            "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\!",
            reply_markup=Menu.back_user_only_main_menu(),
        )

    except Exception as e:
        logger.error(f"Forward error: {e}")
        bot.send_message(
            user_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            reply_markup=Menu.back_user_only_main_menu(),
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if user_id in temp_storage:
            del temp_storage[user_id]


# –û–¢–ü–†–ê–í–ö–ê –ù–û–í–û–°–¢–ï–ô


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_TO_NEWS)
@lock_input()
@private_chat_only(bot)
def handle_user_to_news(call):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if not is_user_in_chat(call.from_user.id):
        bot.send_message(
            call.message.chat.id,
            "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ\!\n"
            + Links.get_chat_url(),
            reply_markup=Menu.back_user_only_main_menu(),
        )
        return

    bot.edit_message_text(
        text="–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É?",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=Menu.news_menu(),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_NEWS
)
@lock_input()
def handle_user_news_news(call):
    user_id = call.from_user.id
    if user_id in temp_storage:
        del temp_storage[user_id]
    user_content_storage.init_news(user_id)
    bot.set_state(user_id, UserState.WAITING_NEWS_SCREENSHOTS)
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó ForceReply
    bot.edit_message_text(
        text="üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏\n üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_CODE_DREAM
)
@lock_input()
def handle_news_code(call):
    user_id = call.from_user.id
    if user_id in temp_storage:
        del temp_storage[user_id]
    user_content_storage.init_code(user_id)
    bot.set_state(user_id, UserState.WAITING_CODE_VALUE)
    bot.edit_message_text(
        text="üî¢ –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥\n"
        "*–§–æ—Ä–º–∞—Ç*: `DA-0000-0000-0000` _\(–≤–º–µ—Å—Ç–æ 0 –≤–∞—à–∏ —Ü–∏—Ñ—Ä—ã\)_\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="MarkdownV2",
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_CODE_DLC
)
@lock_input()
def handle_news_code(call):
    user_id = call.from_user.id
    if user_id in temp_storage:
        del temp_storage[user_id]
    user_content_storage.init_code(user_id)
    bot.set_state(user_id, UserState.WAITING_CODE_VALUE)
    bot.edit_message_text(
        text="üî¢ –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥\n"
        "*–§–æ—Ä–º–∞—Ç*: `RA-0000-0000-0000` _\(–≤–º–µ—Å—Ç–æ 0 –≤–∞—à–∏ —Ü–∏—Ñ—Ä—ã\)_\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="MarkdownV2",
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_POCKET,
)
@lock_input()
def handle_news_pocket(call):
    user_id = call.from_user.id
    if user_id in temp_storage:
        del temp_storage[user_id]
    user_content_storage.init_pocket(user_id)
    bot.set_state(user_id, UserState.WAITING_POCKET_SCREEN)
    bot.edit_message_text(
        text="üì∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å 2 —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥—Ä—É–∂–±—ã: –ª–∏—Ü–µ–≤—É—é –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—ã\n"
        '–õ—É—á—à–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "SAVE"\!\n\n'
        "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —á–∞—Ç\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )


@bot.callback_query_handler(
    func=lambda call: call.data == ButtonCallback.USER_NEWS_DESIGN,
)
@lock_input()
def handle_news_design(call):
    user_id = call.from_user.id
    if user_id in temp_storage:
        del temp_storage[user_id]
    user_content_storage.init_design(user_id)
    bot.set_state(user_id, UserState.WAITING_DESIGN_CODE)
    bot.edit_message_text(
        text="üé® –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–∏–∑–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`MA-0000-0000-0000`\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )


def validate_code(pattern, code):
    return re.match(pattern, code.strip(), re.IGNORECASE) is not None


def parse_speaker_info(text):
    parts = [p.strip() for p in text.split(",", 1)]
    return parts[0], parts[1] if len(parts) > 1 else None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_NEWS
@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_SCREENSHOTS,
)
@lock_input(allow_media_groups=True)
def handle_news_screenshots(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "news")

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if data.get("progress_message_id"):
            bot.delete_message(message.chat.id, data["progress_message_id"])
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞–∏–±–æ–ª—å—à–∏–π)
    original_photo = message.photo[-1]

    # 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–≤—å—é —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    unique_id = original_photo.file_unique_id

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    existing_ids = {p["unique_id"] for p in data.get("photos", [])}
    if unique_id in existing_ids:
        bot.reply_to(message, "‚ùå –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\!")
        return

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(data.get("photos", [])) > 10:
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\!")
        request_description(user_id)

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª
    data.setdefault("photos", []).append(
        {"file_id": original_photo.file_id, "unique_id": unique_id}
    )

    # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_content_storage.update_data(user_id, data)

    if len(data["photos"]) == 10:
        request_description(user_id)
    else:
        # –î–æ–±–∞–≤–∏–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        progress_bar = "üü™" * len(data["photos"]) + "‚¨ú" * (10 - len(data["photos"]))

        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        sent_msg = bot.reply_to(
            message,
            f"{progress_bar}\n"
            f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω\! –í—Å–µ–≥–æ: {len(data['photos'])}/10\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done\n\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data["progress_message_id"] = sent_msg.message_id
        user_content_storage.update_data(user_id, data)


def request_description(user_id):
    bot.set_state(user_id, UserState.WAITING_NEWS_DESCRIPTION)
    bot.send_message(
        user_id,
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ \(–∏–ª–∏ /skip\)\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )


@bot.message_handler(
    commands=["done"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_SCREENSHOTS,
)
@lock_input()
def handle_done_news_photos(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "news")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if data.get("progress_msg_id"):
        try:
            bot.delete_message(message.chat.id, data["progress_msg_id"])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    if len(data.get("photos", [])) == 0:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ\!")
        return

    request_description(user_id)


@bot.message_handler(
    commands=["skip"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_DESCRIPTION,
)
@lock_input()
def skip_news_description(message):
    user_id = message.from_user.id
    bot.set_state(user_id, UserState.WAITING_NEWS_SPEAKER)
    bot.send_message(
        message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_DESCRIPTION,
)
@lock_input()
def handle_news_description(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "news")
    data["description"] = message.text
    bot.set_state(user_id, UserState.WAITING_NEWS_SPEAKER)
    bot.send_message(
        message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_SPEAKER,
)
@lock_input()
def handle_news_speaker(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "news")
    data["speaker"] = message.text
    bot.set_state(user_id, UserState.WAITING_NEWS_ISLAND)
    bot.send_message(
        message.chat.id,
        "üèùÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_NEWS_ISLAND,
)
@lock_input()
def handle_news_island(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "news")
    data["island"] = message.text
    preview_send_to_news_chat(user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_CODE
@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_VALUE,
)
@lock_input()
def handle_code_value(message):
    user_id = message.from_user.id
    code = message.text.upper()

    if not validate_code(r"^[DR]A-\d{4}-\d{4}-\d{4}$", code):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞\! –ü—Ä–∏–º–µ—Ä: DA-1234-5678-9012")
        return

    user_content_storage.get_data(user_id, "code")["code"] = code
    bot.set_state(user_id, UserState.WAITING_CODE_SCREENSHOTS)
    bot.send_message(
        message.chat.id,
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )


@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_SCREENSHOTS,
)
@lock_input(allow_media_groups=True)
def handle_code_screenshots(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "code")

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if data.get("progress_message_id"):
            bot.delete_message(message.chat.id, data["progress_message_id"])
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞–∏–±–æ–ª—å—à–∏–π)
    original_photo = message.photo[-1]

    # 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–≤—å—é —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    unique_id = original_photo.file_unique_id

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    existing_ids = {p["unique_id"] for p in data.get("photos", [])}
    if unique_id in existing_ids:
        bot.reply_to(message, "‚ùå –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\!")
        return

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(data.get("photos", [])) > 10:
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\!")
        request_speaker(user_id)

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª
    data.setdefault("photos", []).append(
        {"file_id": original_photo.file_id, "unique_id": unique_id}
    )

    # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_content_storage.update_data(user_id, data)

    if len(data["photos"]) == 10:
        request_speaker(user_id)
    else:
        # –î–æ–±–∞–≤–∏–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        progress_bar = "üü™" * len(data["photos"]) + "‚¨ú" * (10 - len(data["photos"]))

        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        sent_msg = bot.reply_to(
            message,
            f"{progress_bar}\n"
            f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω\! –í—Å–µ–≥–æ: {len(data['photos'])}/10\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done\n\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data["progress_message_id"] = sent_msg.message_id
        user_content_storage.update_data(user_id, data)


def request_speaker(user_id):
    bot.set_state(user_id, UserState.WAITING_CODE_SPEAKER)
    bot.send_message(
        user_id, "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )


@bot.message_handler(
    commands=["done"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_SCREENSHOTS,
)
@lock_input()
def handle_done_news_photos(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "code")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if data.get("progress_msg_id"):
        try:
            bot.delete_message(message.chat.id, data["progress_msg_id"])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    if len(data.get("photos", [])) == 0:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ\!")
        return

    request_speaker(user_id)


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_SPEAKER,
)
@lock_input()
def handle_code_speaker(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "code")
    data["speaker"] = message.text
    bot.set_state(user_id, UserState.WAITING_CODE_ISLAND)
    bot.send_message(
        message.chat.id,
        "üèùÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_CODE_ISLAND,
)
@lock_input()
def handle_code_island(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "code")
    data["island"] = message.text
    preview_send_to_news_chat(user_id)


pocket_media_groups = {}
pocket_user_locks = {}
# –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
error_media_groups = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_POCKET
@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_POCKET_SCREEN,
)
@lock_input(allow_media_groups=True)
def handle_pocket_screens(message):
    user_id = message.from_user.id

    try:
        data = user_content_storage.get_data(user_id, "pocket")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        if message.media_group_id:
            return handle_media_group(message, data, user_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        handle_single_photo(message, data, user_id)

    except Exception as e:
        logger.error(f"Error: {str(e)}", exc_info=True)
        handle_pocket_error(user_id)


def handle_media_group(message, data, user_id):
    media_group_id = message.media_group_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
    if media_group_id in error_media_groups:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    existing_photos = user_content_storage.get_data(user_id, "pocket").get("photos", [])
    if len(existing_photos) > 0:
        # –ü–æ–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å –æ—à–∏–±–∫–æ–π
        error_media_groups[media_group_id] = True
        bot.send_message(
            user_id,
            "‚ùå _–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 1 —Ñ–æ—Ç–æ —Ä–∞–Ω–µ–µ, –∞ —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ\!_\n–ü—Ä–∏—à–ª–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ\!",
            parse_mode="MarkdownV2",
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (5 –º–∏–Ω—É—Ç)
        threading.Timer(
            300, lambda: error_media_groups.pop(media_group_id, None)
        ).start()
        return

    largest_photo = max(message.photo, key=lambda p: p.file_size)
    mg_id = message.media_group_id

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–æ–≤–∞—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if mg_id not in pocket_media_groups:
        pocket_media_groups[mg_id] = {
            "user_id": user_id,
            "photos": [],
            "timer": threading.Timer(3.0, process_pocket_group, [mg_id]),
        }
        pocket_media_groups[mg_id]["timer"].start()
    else:
        # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ —É–∂–µ 2+ —Ñ–æ—Ç–æ - –æ—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        if len(pocket_media_groups[mg_id]["photos"]) >= 2:
            pocket_media_groups[mg_id]["timer"].cancel()
            del pocket_media_groups[mg_id]
            handle_pocket_error(user_id, "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 2 —Ñ–æ—Ç–æ\!")
            return

    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
    if not any(
        p["unique_id"] == largest_photo.file_unique_id
        for p in pocket_media_groups[mg_id]["photos"]
    ):
        pocket_media_groups[mg_id]["photos"].append(
            {
                "file_id": largest_photo.file_id,
                "unique_id": largest_photo.file_unique_id,
            }
        )

        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç - —Å—Ä–∞–∑—É –æ—Ç–º–µ–Ω—è–µ–º
        if len(pocket_media_groups[mg_id]["photos"]) > 2:
            handle_pocket_error(user_id, "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 2 —Ñ–æ—Ç–æ\!")
            pocket_media_groups[mg_id]["timer"].cancel()
            del pocket_media_groups[mg_id]


def handle_single_photo(message, data, user_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if "photos" not in data:
        user_content_storage.init_pocket(user_id)
        data = user_content_storage.get_data(user_id)

    largest_photo = max(message.photo, key=lambda p: p.file_size)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    data["photos"].append(
        {"file_id": largest_photo.file_id, "unique_id": largest_photo.file_unique_id}
    )

    # –õ–∏–º–∏—Ç —Ñ–æ—Ç–æ
    if len(data["photos"]) > 2:
        handle_pocket_error(user_id, "‚ùå –ú–∞–∫—Å–∏–º—É–º 2 —Ñ–æ—Ç–æ\!")
        return

    user_content_storage.update_data(user_id, data)

    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    if len(data["photos"]) == 1:
        bot.send_message(user_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ")
    elif len(data["photos"]) == 2:
        finish_pocket_submission(user_id)


def process_pocket_group(media_group_id):
    group_data = pocket_media_groups.pop(media_group_id, None)
    if not group_data:
        return

    user_id = group_data["user_id"]
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if len(group_data["photos"]) != 2:
            handle_pocket_error(user_id, "‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–≤–Ω–æ 2 —Ñ–æ—Ç–æ\!")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        data = user_content_storage.get_data(user_id, "pocket")
        data["photos"] = group_data["photos"]
        user_content_storage.update_data(user_id, data)
        finish_pocket_submission(user_id)

    except Exception as e:
        handle_pocket_error(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def handle_pocket_error(user_id, message="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
    user_content_storage.clear(user_id)
    bot.delete_state(user_id)
    bot.send_message(user_id, message, reply_markup=Menu.news_menu())
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for mg_id, group in list(pocket_media_groups.items()):
        if group["user_id"] == user_id:
            group["timer"].cancel()
            del pocket_media_groups[mg_id]


def finish_pocket_submission(user_id):
    try:
        bot.delete_state(user_id)
        preview_send_to_news_chat(user_id)
    finally:
        user_content_storage.clear(user_id)
        pocket_user_locks.pop(user_id, None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@bot.message_handler(
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_POCKET_SCREEN
    and m.content_type != "photo",
)
@lock_input()
def handle_invalid_content(message):
    bot.send_message(
        message.chat.id,
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è USER_NEWS_DESIGN
@bot.message_handler(
    content_types=["text"],
    func=lambda m: bot.get_state(m.from_user.id) == UserState.WAITING_DESIGN_CODE,
)
@lock_input()
def handle_design_code(message):
    user_id = message.from_user.id
    code = message.text.upper()

    if not validate_code(r"^MA-\d{4}-\d{4}-\d{4}$", code):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\! –ü—Ä–∏–º–µ—Ä: MA-1234-5678-9012")
        return

    user_content_storage.get_data(user_id, "design")["code"] = code
    bot.set_state(user_id, UserState.WAITING_DESIGN_DESIGN_SCREEN)
    bot.send_message(
        message.chat.id,
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )


@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id)
    == UserState.WAITING_DESIGN_DESIGN_SCREEN,
)
@lock_input(allow_media_groups=True)
def handle_design_screen(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "design")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–ª—å–±–æ–º
    if message.media_group_id:
        bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ\!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–Ω–∞–∏–±–æ–ª—å—à–∏–π) —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
    photo_data = {
        "file_id": message.photo[-1].file_id,
        "unique_id": message.photo[-1].file_unique_id,
    }

    data["design_screen"].append(photo_data)
    user_content_storage.update_data(user_id, data)

    bot.set_state(user_id, UserState.WAITING_DESIGN_GAME_SCREENS)
    bot.send_message(
        message.chat.id,
        "üéÆ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 9 \(–ù–ï 10\) —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∏—Å—É–Ω–∫–∞ –≤ –∏–≥—Ä–µ:\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )


@bot.message_handler(
    content_types=["photo"],
    func=lambda m: bot.get_state(m.from_user.id)
    == UserState.WAITING_DESIGN_GAME_SCREENS,
)
@lock_input(allow_media_groups=True)
def handle_game_screens(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "design")

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if data.get("progress_message_id"):
            bot.delete_message(message.chat.id, data["progress_message_id"])
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞–∏–±–æ–ª—å—à–∏–π)
    original_photo = message.photo[-1]

    # 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–≤—å—é —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    unique_id = original_photo.file_unique_id

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    existing_ids = {p["unique_id"] for p in data.get("game_screens", [])}
    if unique_id in existing_ids:
        bot.reply_to(message, "‚ùå –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\!")
        return

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(data.get("game_screens", [])) >= 9:
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º 9 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\!")
        return

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª
    data.setdefault("game_screens", []).append(
        {"file_id": original_photo.file_id, "unique_id": unique_id}
    )

    # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_content_storage.update_data(user_id, data)

    # –î–æ–±–∞–≤–∏–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress_bar = "üü™" * len(data["game_screens"]) + "‚¨ú" * (
        9 - len(data["game_screens"])
    )

    # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    sent_msg = bot.reply_to(
        message,
        f"{progress_bar}\n"
        f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω\! –í—Å–µ–≥–æ: {len(data['game_screens'])}/9\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done\n\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    data["progress_message_id"] = sent_msg.message_id
    user_content_storage.update_data(user_id, data)


@bot.message_handler(
    commands=["done"],
    func=lambda message: bot.get_state(message.from_user.id)
    == UserState.WAITING_DESIGN_GAME_SCREENS,
)
@lock_input()
def handle_done(message):
    user_id = message.from_user.id
    data = user_content_storage.get_data(user_id, "design")

    try:
        if data.get("progress_message_id"):
            bot.delete_message(message.chat.id, data["progress_message_id"])
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    preview_send_to_news_chat(user_id)


def preview_send_to_news_chat(user_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        data = user_content_storage.get_data(user_id, "design")
        user = bot.get_chat(user_id)
        logger = logging.getLogger(__name__)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        user_info = "\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: "
        if user.username:
            user_info += f"@{user.username}"
            name_parts = []
            if user.first_name:
                name_parts.append(user.first_name)
            if user.last_name:
                name_parts.append(user.last_name)
            if name_parts:
                user_info += f" ({' '.join(name_parts)})"
        else:
            name_parts = []
            if user.first_name:
                name_parts.append(user.first_name)
            if user.last_name:
                name_parts.append(user.last_name)
            user_info += (
                f"{' '.join(name_parts)} [ID: {user_id}]"
                if name_parts
                else f"[ID: {user_id}]"
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media = []
        text = ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if data["type"] == "news":
            text = f"{ButtonText.USER_NEWS_NEWS}\n"
            if data.get("description"):
                text += f"\nüìù {data['description']}"
            text += f"\nüë§ –°–ø–∏–∫–µ—Ä: {data.get('speaker', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            text += f"\nüèùÔ∏è –û—Å—Ç—Ä–æ–≤: {data.get('island', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
            seen_ids = set()
            unique_photos = []
            for photo in data["photos"]:
                if photo["unique_id"] not in seen_ids:
                    seen_ids.add(photo["unique_id"])
                    unique_photos.append(photo)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            media = [types.InputMediaPhoto(p["file_id"]) for p in unique_photos[:10]]

        elif data["type"] == "code":
            text = f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ (—Å–æ–Ω –∏–ª–∏ –∫—É—Ä–æ—Ä—Ç)\n"
            text += f"\n–ö–æ–¥: {data.get('code', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            text += f"\nüë§ –°–ø–∏–∫–µ—Ä: {data.get('speaker', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            text += f"\nüèùÔ∏è –û—Å—Ç—Ä–æ–≤: {data.get('island', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ñ–æ—Ç–æ
            seen_ids = set()
            unique_photos = []
            for photo in data["photos"]:
                if photo["unique_id"] not in seen_ids:
                    seen_ids.add(photo["unique_id"])
                    unique_photos.append(photo)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            media = [types.InputMediaPhoto(p["file_id"]) for p in unique_photos[:10]]

        elif data["type"] == "pocket":
            text = f"{ButtonText.USER_NEWS_POCKET}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            seen_ids = set()
            unique_photos = []
            for photo in data["photos"]:
                if photo["unique_id"] not in seen_ids:
                    seen_ids.add(photo["unique_id"])
                    unique_photos.append(photo)

            if len(unique_photos) != 2:
                raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ")

            media = [
                types.InputMediaPhoto(unique_photos[0]["file_id"]),
                types.InputMediaPhoto(unique_photos[1]["file_id"]),
            ]

        elif data["type"] == "design":
            text = f"{ButtonText.USER_NEWS_DESIGN}\n"
            text += f"\n–ö–æ–¥: {data.get('code', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            if not data.get("design_screen"):
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–∏–∑–∞–π–Ω–∞")

            media = [types.InputMediaPhoto(data["design_screen"][0]["file_id"])]

            # –ò–≥—Ä–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            seen_ids = set()
            for photo in data.get("game_screens", []):
                if photo["unique_id"] not in seen_ids:
                    media.append(types.InputMediaPhoto(photo["file_id"]))
                    seen_ids.add(photo["unique_id"])
                    if len(media) >= 10:  # –û–±—â–∏–π –ª–∏–º–∏—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                        break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤–∫–ª—é—á–∞—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é media
        temp_storage[user_id] = {
            "media": media,
            "text": text,
            "user_info": user_info,
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if media:
            bot.send_media_group(user_id, media)
        bot.send_message(user_id, text)
        confirm_markup = types.InlineKeyboardMarkup()
        confirm_markup.row(
            types.InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data=f"news_confirm_{user_id}"
            ),
            types.InlineKeyboardButton(
                "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"news_cancel_{user_id}"
            ),
        )
        bot.send_message(
            user_id,
            "–≠—Ç–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=confirm_markup,
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg, exc_info=True)
        bot.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=Menu.back_user_only_main_menu(),
        )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith(("news_confirm_", "news_cancel_")),
)
@lock_input()
def handle_preview_actions_send_to_news_chat(call):
    user_id = call.from_user.id
    action, target_user_id = call.data.split("_")[-2:]
    target_user_id = int(target_user_id)
    target_chat = NEWSPAPER_CHAT_ID

    try:
        if action == "confirm":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            data = temp_storage.get(target_user_id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if not data:
                bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
                bot.send_message(
                    user_id,
                    "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
                    reply_markup=Menu.back_user_only_main_menu(),
                )
                return

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
            if data["media"]:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–∑ {len(data['media'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                bot.send_media_group(target_chat, data["media"])
                bot.send_message(
                    target_chat,
                    text=f"–¢–µ–∫—Å—Ç:\n{data['text']}\n\n–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{data['user_info']}\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å?",
                    reply_markup=markup,
                )

            bot.answer_callback_query(
                call.id,
                "‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\!",
            )
            bot.send_message(
                user_id,
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
                reply_markup=Menu.back_user_only_main_menu(),
            )
        else:
            bot.answer_callback_query(
                call.id,
                "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            )
            bot.send_message(
                user_id,
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
                reply_markup=Menu.back_user_only_main_menu(),
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(call.message.chat.id, call.message.message_id)

    except Exception as e:
        logger.error(f"handle_preview_actions_send_to_news_chat error:\n{e}")
        bot.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=Menu.news_menu(),
        )
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if user_id in temp_storage:
            del temp_storage[user_id]
        user_content_storage.clear(user_id)
        bot.delete_state(user_id)
        logger.debug("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã")