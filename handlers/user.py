from datetime import datetime
import threading
from telebot import types
import time
from database.contest import ContestManager
from bot_instance import bot
from handlers.envParams import ADMIN_USERNAME, CONTEST_CHAT_ID
from menu.menu import Menu
from menu.constants import ButtonCallback, ButtonText, ConstantLinks


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_GUIDES)
def handle_user_guides(call):
    print(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ú–µ–Ω—é –≥–∞–π–¥–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.guides_menu()
    )


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_FIND_GUIDE)
def handle_user_find_guide(call):
    print(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–∞–π–¥—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.guides_menu()
    )


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_CONTEST)
def handle_user_guides(call):
    print(f"Received callback: {call.data}, chat_id: {call.message.chat.id}")
    bot.edit_message_text(
        "–ú–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=Menu.contests_menu()
    )


@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_CONTEST_INFO)
def handle_user_contest_info(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ
        contest = ContestManager.get_current_contest()
        
        if not contest:
            # –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ
            text = "üéâ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ—Ç.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            markup = Menu.back_to_main_menu()
        else:
            current_date = datetime.now().date()
            end_date_obj = datetime.strptime(contest[4], "%d.%m.%Y").date()

            if end_date_obj < current_date:
                text += "\n\n‚ùóÔ∏è *–ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!*"

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            theme = contest[1]
            description = contest[2]
            contest_date = datetime.strptime(contest[3], "%d.%m.%Y").strftime("%d %B %Y")
            end_date_of_admission = datetime.strptime(contest[4], "%d.%m.%Y").strftime("%d %B %Y")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                f"üèÜ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å!*\n\n"
                f"üìå *–¢–µ–º–∞:* {theme}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                f"üóì *–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:*\n"
                f"‚û°Ô∏è –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: {contest_date}\n"
                f"‚û°Ô∏è –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –¥–æ: {end_date_of_admission}\n\n"
                f"–ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É—á–∞—Å—Ç–∏—è (–∏ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤) –ø–æ —Å—Å—ã–ª–∫–µ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton(
                    text="üìú –ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è", 
                    url=ConstantLinks.CONTEST_LINK
                )
            )
            markup.row(
                types.InlineKeyboardButton(ButtonText.BACK, callback_data=ButtonCallback.USER_CONTEST),
                types.InlineKeyboardButton(ButtonText.MAIN_MENU, callback_data=ButtonCallback.MAIN_MENU)
            )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—É—Ä—Å–µ: {e}")
        bot.answer_callback_query(
            call.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            show_alert=True
        )


SUBMISSION_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_submissions = {}

class ContestSubmission:
    def __init__(self):
        self.photos = []
        self.caption = ""
        self.send_by_bot = None  # True/False
        self.submission_time = time.time()

@bot.callback_query_handler(func=lambda call: call.data == ButtonCallback.USER_CONTEST_SEND)
def start_contest_submission(call):
    try:
        user_id = call.from_user.id
        user_submissions[user_id] = ContestSubmission()
        
        bot.send_message(
            call.message.chat.id,
            "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–±–æ—Ç—É (–¥–æ 10 —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –±–µ–∑):",
            reply_markup=types.ForceReply()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)

@bot.message_handler(content_types=['photo', 'text'], func=lambda m: m.from_user.id in user_submissions)
def handle_work_submission(message):
    user_id = message.from_user.id
    submission = user_submissions[user_id]
    
    try:
        if message.photo:
            largest_photo = max(message.photo, key=lambda p: p.file_size)
            submission.photos.append(largest_photo.file_id)
        
        if message.caption:
            submission.caption = message.caption
        elif message.text:
            submission.caption = message.text
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        if not submission.photos:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        if message.photo:
            if len(submission.photos) >= 10:
                bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ!")
                return
            largest_photo = max(message.photo, key=lambda p: p.file_size)
            submission.photos.append(largest_photo.file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        if message.caption:
            submission.caption = message.caption
        elif message.text:
            submission.caption = message.text
            
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="send_by_bot_yes"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—é —Å–∞–º(–∞)", callback_data="send_by_bot_no")
        )
        
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –∑–∞ –í–∞—Å?",
            reply_markup=markup
        )
        
    except ValueError as e:
        bot.send_message(message.chat.id, f"‚ùå {str(e)}")
        del user_submissions[user_id]
    except Exception as e:
        handle_submission_error(user_id, e)

@bot.callback_query_handler(func=lambda call: call.data.startswith('send_by_bot_'))
def handle_send_method(call):
    user_id = call.from_user.id
    if user_id not in user_submissions:
        return
    
    try:
        submission = user_submissions[user_id]
        submission.send_by_bot = call.data == 'send_by_bot_yes'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É –≤ —á–∞—Ç –∫–æ–Ω–∫—É—Ä—Å–∞
        caption = f"{submission.caption}\n\n"
        caption += f"–ê–≤—Ç–æ—Ä: @{call.from_user.username}\n"
        caption += f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º–∏: {'‚úÖ –î–∞' if submission.send_by_bot else '‚ùå –ù–µ—Ç'}"
        
        if submission.photos:
            if len(submission.photos) == 1:
                bot.send_photo(
                    CONTEST_CHAT_ID,
                    submission.photos[0],
                    caption=caption
                )
            else:
                media = [types.InputMediaPhoto(pid) for pid in submission.photos]
                media[0].caption = caption
                bot.send_media_group(CONTEST_CHAT_ID, media)
        else:
            bot.send_message(CONTEST_CHAT_ID, caption)
            
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            user_id,
            "‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –í–∞–º –ø—Ä–∏—à–ª—é—Ç –Ω–æ–º–µ—Ä.",
            reply_markup=Menu.main_menu()
        )
        
        del user_submissions[user_id]
        
    except Exception as e:
        handle_submission_error(user_id, e)

def handle_submission_error(user_id, error):
    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error}")
    if user_id in user_submissions:
        del user_submissions[user_id]
    
    bot.send_message(
        user_id,
        f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å @{ADMIN_USERNAME}",
        reply_markup=Menu.main_menu()
    )

# –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç
def check_timeout():
    while True:
        try:
            current_time = time.time()
            for user_id in list(user_submissions.keys()):
                if current_time - user_submissions[user_id].submission_time > 600:
                    del user_submissions[user_id]
                    bot.send_message(
                        user_id, 
                        "‚åõ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ç–µ–∫–ª–æ! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=Menu.main_menu()
                    )
            time.sleep(60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")

threading.Thread(target=check_timeout, daemon=True).start()
